[{"/home/tcg/my-workspace/Team-Serengetti/expense-tracker-app/client/src/index.js":"1","/home/tcg/my-workspace/Team-Serengetti/expense-tracker-app/client/src/serviceWorker.js":"2","/home/tcg/my-workspace/Team-Serengetti/expense-tracker-app/client/src/app/locale/i18n.js":"3","/home/tcg/my-workspace/Team-Serengetti/expense-tracker-app/client/src/App.jsx":"4","/home/tcg/my-workspace/Team-Serengetti/expense-tracker-app/client/src/Helpers.js":"5","/home/tcg/my-workspace/Team-Serengetti/expense-tracker-app/client/src/app/locale/translations/bn.js":"6","/home/tcg/my-workspace/Team-Serengetti/expense-tracker-app/client/src/app/locale/translations/en.js":"7","/home/tcg/my-workspace/Team-Serengetti/expense-tracker-app/client/src/Store.js":"8","/home/tcg/my-workspace/Team-Serengetti/expense-tracker-app/client/src/Routes.jsx":"9","/home/tcg/my-workspace/Team-Serengetti/expense-tracker-app/client/src/app/landing/Website.jsx":"10","/home/tcg/my-workspace/Team-Serengetti/expense-tracker-app/client/src/app/auth/Login.jsx":"11","/home/tcg/my-workspace/Team-Serengetti/expense-tracker-app/client/src/app/auth/Register.jsx":"12","/home/tcg/my-workspace/Team-Serengetti/expense-tracker-app/client/src/app/layouts/DashboardLayout.jsx":"13","/home/tcg/my-workspace/Team-Serengetti/expense-tracker-app/client/src/API.js":"14","/home/tcg/my-workspace/Team-Serengetti/expense-tracker-app/client/src/Axios.js":"15","/home/tcg/my-workspace/Team-Serengetti/expense-tracker-app/client/src/app/layouts/LandingLayout.jsx":"16","/home/tcg/my-workspace/Team-Serengetti/expense-tracker-app/client/src/app/locale/LocaleToggle.jsx":"17","/home/tcg/my-workspace/Team-Serengetti/expense-tracker-app/client/src/app/dashboard/AppTopbar.jsx":"18","/home/tcg/my-workspace/Team-Serengetti/expense-tracker-app/client/src/app/dashboard/AppInlineProfile.jsx":"19","/home/tcg/my-workspace/Team-Serengetti/expense-tracker-app/client/src/app/dashboard/AppMenu.jsx":"20","/home/tcg/my-workspace/Team-Serengetti/expense-tracker-app/client/src/app/dashboard/AppFooter.jsx":"21","/home/tcg/my-workspace/Team-Serengetti/expense-tracker-app/client/src/app/dashboard/Dashboard.jsx":"22","/home/tcg/my-workspace/Team-Serengetti/expense-tracker-app/client/src/app/dashboard/ScrollToTop.jsx":"23","/home/tcg/my-workspace/Team-Serengetti/expense-tracker-app/client/src/app/expense/ExpenseCategory.jsx":"24","/home/tcg/my-workspace/Team-Serengetti/expense-tracker-app/client/src/app/expense/Expense.jsx":"25","/home/tcg/my-workspace/Team-Serengetti/expense-tracker-app/client/src/app/expense/EditExpense.jsx":"26","/home/tcg/my-workspace/Team-Serengetti/expense-tracker-app/client/src/app/expense/EditExpenseCategory.jsx":"27","/home/tcg/my-workspace/Team-Serengetti/expense-tracker-app/client/src/app/income/IncomeCategory.jsx":"28","/home/tcg/my-workspace/Team-Serengetti/expense-tracker-app/client/src/app/income/Income.jsx":"29","/home/tcg/my-workspace/Team-Serengetti/expense-tracker-app/client/src/app/income/EditIncome.jsx":"30","/home/tcg/my-workspace/Team-Serengetti/expense-tracker-app/client/src/app/income/EditIncomeCategory.jsx":"31","/home/tcg/my-workspace/Team-Serengetti/expense-tracker-app/client/src/app/profile/Profile.jsx":"32","/home/tcg/my-workspace/Team-Serengetti/expense-tracker-app/client/src/app/profile/EditProfile.jsx":"33","/home/tcg/my-workspace/Team-Serengetti/expense-tracker-app/client/src/app/calendar/TransactionCalendar.jsx":"34","/home/tcg/my-workspace/Team-Serengetti/expense-tracker-app/client/src/app/setting/Setting.jsx":"35","/home/tcg/my-workspace/Team-Serengetti/expense-tracker-app/client/src/app/errors/404.jsx":"36","/home/tcg/my-workspace/Team-Serengetti/expense-tracker-app/client/src/app/analytics/Analytics.jsx":"37","/home/tcg/my-workspace/Team-Serengetti/expense-tracker-app/client/src/app/expense/ExpenseListItem.jsx":"38","/home/tcg/my-workspace/Team-Serengetti/expense-tracker-app/client/src/app/dashboard/AppSubmenu.jsx":"39","/home/tcg/my-workspace/Team-Serengetti/expense-tracker-app/client/src/app/income/IncomeListItem.jsx":"40","/home/tcg/my-workspace/Team-Serengetti/expense-tracker-app/client/src/app/common/ToolsSidebar.jsx":"41","/home/tcg/my-workspace/Team-Serengetti/expense-tracker-app/client/src/app/common/CurrencySidebar.jsx":"42","/home/tcg/my-workspace/Team-Serengetti/expense-tracker-app/client/src/app/common/calculator/Calculator.js":"43"},{"size":507,"mtime":1635949116774,"results":"44","hashOfConfig":"45"},{"size":5086,"mtime":1635949116774,"results":"46","hashOfConfig":"45"},{"size":567,"mtime":1635949116770,"results":"47","hashOfConfig":"45"},{"size":1278,"mtime":1635949116766,"results":"48","hashOfConfig":"45"},{"size":1174,"mtime":1635949116766,"results":"49","hashOfConfig":"45"},{"size":1161,"mtime":1635949116770,"results":"50","hashOfConfig":"45"},{"size":773,"mtime":1635949116770,"results":"51","hashOfConfig":"45"},{"size":645,"mtime":1635949116766,"results":"52","hashOfConfig":"45"},{"size":1414,"mtime":1635949116766,"results":"53","hashOfConfig":"45"},{"size":714,"mtime":1635949116766,"results":"54","hashOfConfig":"45"},{"size":4235,"mtime":1635949116766,"results":"55","hashOfConfig":"45"},{"size":5183,"mtime":1635949116766,"results":"56","hashOfConfig":"45"},{"size":6340,"mtime":1635949116770,"results":"57","hashOfConfig":"45"},{"size":1321,"mtime":1635949116766,"results":"58","hashOfConfig":"45"},{"size":2982,"mtime":1635949116766,"results":"59","hashOfConfig":"45"},{"size":180,"mtime":1635949116770,"results":"60","hashOfConfig":"45"},{"size":835,"mtime":1635949116770,"results":"61","hashOfConfig":"45"},{"size":973,"mtime":1635949116766,"results":"62","hashOfConfig":"45"},{"size":491,"mtime":1635949116766,"results":"63","hashOfConfig":"45"},{"size":501,"mtime":1635949116766,"results":"64","hashOfConfig":"45"},{"size":653,"mtime":1635949116766,"results":"65","hashOfConfig":"45"},{"size":15573,"mtime":1635949116766,"results":"66","hashOfConfig":"45"},{"size":717,"mtime":1635949116766,"results":"67","hashOfConfig":"45"},{"size":9920,"mtime":1635949116766,"results":"68","hashOfConfig":"45"},{"size":16447,"mtime":1635949116766,"results":"69","hashOfConfig":"45"},{"size":8332,"mtime":1635949116766,"results":"70","hashOfConfig":"45"},{"size":4182,"mtime":1635949116766,"results":"71","hashOfConfig":"45"},{"size":9892,"mtime":1635949116766,"results":"72","hashOfConfig":"45"},{"size":16233,"mtime":1635949116766,"results":"73","hashOfConfig":"45"},{"size":8290,"mtime":1635949116766,"results":"74","hashOfConfig":"45"},{"size":4165,"mtime":1635949116766,"results":"75","hashOfConfig":"45"},{"size":5864,"mtime":1635949116770,"results":"76","hashOfConfig":"45"},{"size":6931,"mtime":1635949116770,"results":"77","hashOfConfig":"45"},{"size":6654,"mtime":1635949116766,"results":"78","hashOfConfig":"45"},{"size":6436,"mtime":1635949116770,"results":"79","hashOfConfig":"45"},{"size":422,"mtime":1635949116766,"results":"80","hashOfConfig":"45"},{"size":5638,"mtime":1635949116766,"results":"81","hashOfConfig":"45"},{"size":763,"mtime":1635949116766,"results":"82","hashOfConfig":"45"},{"size":2273,"mtime":1635949116766,"results":"83","hashOfConfig":"45"},{"size":758,"mtime":1635949116766,"results":"84","hashOfConfig":"45"},{"size":449,"mtime":1635949116766,"results":"85","hashOfConfig":"45"},{"size":2417,"mtime":1635949116766,"results":"86","hashOfConfig":"45"},{"size":8080,"mtime":1635949116766,"results":"87","hashOfConfig":"45"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"dmo02y",{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100"},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103"},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112"},{"filePath":"113","messages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127"},{"filePath":"128","messages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130"},{"filePath":"131","messages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"133","messages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137"},{"filePath":"138","messages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"140","messages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142"},{"filePath":"143","messages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145"},{"filePath":"146","messages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148"},{"filePath":"149","messages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151"},{"filePath":"152","messages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154"},{"filePath":"155","messages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157"},{"filePath":"158","messages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160"},{"filePath":"161","messages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163"},{"filePath":"164","messages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"166","messages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168"},{"filePath":"169","messages":"170","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171"},{"filePath":"172","messages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174"},{"filePath":"175","messages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"177","messages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179"},{"filePath":"180","messages":"181","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"182","messages":"183","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"184","messages":"185","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"186","messages":"187","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"188","messages":"189","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190"},{"filePath":"191","messages":"192","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/tcg/my-workspace/Team-Serengetti/expense-tracker-app/client/src/index.js",[],"/home/tcg/my-workspace/Team-Serengetti/expense-tracker-app/client/src/serviceWorker.js",[],"/home/tcg/my-workspace/Team-Serengetti/expense-tracker-app/client/src/app/locale/i18n.js",[],"/home/tcg/my-workspace/Team-Serengetti/expense-tracker-app/client/src/App.jsx",[],"/home/tcg/my-workspace/Team-Serengetti/expense-tracker-app/client/src/Helpers.js",[],"/home/tcg/my-workspace/Team-Serengetti/expense-tracker-app/client/src/app/locale/translations/bn.js",["193"],"export default {\n  translation: {\n    lng: 'বাংলা',\n    name: 'নাম',\n    email: 'ইমেইল',\n    mobile: 'ফোন',\n    password: 'পাসওয়ার্ড',\n    confirm_password: 'কনফার্ম পাসওয়ার্ড',\n    yes: 'হ্যা',\n    no: 'না',\n    login: 'লগইন',\n    sign_in: 'সাইন ইন',\n    enter_login_credential: 'আপনার ইমেইল এবং পাসওয়ার্ড দিন',\n    register: 'রেজিস্টার',\n    enter_registration_credential: 'রেজিস্ট্রেশান এর জন্য তথ্য দিন',\n    forgot_pass: 'পাসওয়ার্ড উদ্ধার',\n    back_to_login: 'লগইন এ ফিরে যান',\n    enter_pin: 'মেসেজ এ প্রাপ্ত পিন প্রবেশ করুন।',\n    please: 'অনুগ্রহপূর্বক',\n    verify: 'যাচাই',\n    send: 'পাঠান',\n    again: 'আবার',\n    send_again: 'আবার পাঠান',\n    no_code_received: 'কোন পিন পাননি?',\n    expense: 'খরচ',\n  }\n}\n","/home/tcg/my-workspace/Team-Serengetti/expense-tracker-app/client/src/app/locale/translations/en.js",["194"],"export default {\n  translation: {\n    lng: 'English',\n    name: 'Name',\n    email: 'Email',\n    mobile: 'Mobile',\n    password: 'Password',\n    confirm_password: 'Confirm Password',\n    are_you_truck_owner: 'Are you a truck owner?',\n    yes: 'Yes',\n    no: 'No',\n    login: 'Login',\n    sign_in: 'Sign-in',\n    enter_login_credential: 'Enter your credentials to login',\n    register: 'Register',\n    enter_registration_credential: 'Enter your info to register',\n    forgot_pass: 'Forgot password?',\n    back_to_login: 'Back to login',\n    enter_pin: 'Enter the pin you received.',\n    please: 'Please',\n    verify: 'Verify',\n    send: 'Send',\n    again: 'Again',\n    send_again: 'Send Again',\n    no_code_received: 'Did\\'t receive any code?',\n    expense: 'Expense',\n  }\n}\n","/home/tcg/my-workspace/Team-Serengetti/expense-tracker-app/client/src/Store.js",[],"/home/tcg/my-workspace/Team-Serengetti/expense-tracker-app/client/src/Routes.jsx",[],"/home/tcg/my-workspace/Team-Serengetti/expense-tracker-app/client/src/app/landing/Website.jsx",[],"/home/tcg/my-workspace/Team-Serengetti/expense-tracker-app/client/src/app/auth/Login.jsx",["195"],"import React, { useState } from 'react';\nimport * as yup from 'yup';\nimport { useForm } from 'react-hook-form';\nimport { Helmet } from 'react-helmet';\n\nimport { Card } from \"primereact/card\";\nimport { Messages } from \"primereact/messages\";\nimport { Button } from \"primereact/button\";\nimport { Link } from \"react-router-dom\";\n\nimport LocaleToggle from './../locale/LocaleToggle';\n\nimport axios from './../../Axios';\nimport { setItem } from \"./../../Helpers\";\nimport { authApiEndpoints } from \"./../../API\";\nimport { useTracked } from './../../Store';\n\nconst loginValidationSchema = yup.object().shape({\n  email: yup.string().required('Email field is required.').email('Email must be a valid email.'),\n  password: yup.string().required('Password field is required.').min(6, 'Must be 6 characters.'),\n});\n\nlet messages; // For alert message\n\nconst Login = (props) => {\n\n  const [state, setState] = useTracked();\n  const [submitting, setSubmitting] = useState(false);\n\n  // console.log('Login', state);\n\n  // Login form handle\n  const { register, handleSubmit, errors } = useForm({\n    validationSchema: loginValidationSchema\n  });\n\n  const submitLogin = (data) => {\n    messages.clear(); // Clear existing messages\n    setSubmitting(true);\n    axios.post(authApiEndpoints.login, JSON.stringify(data))\n      .then(response => {\n        // console.log('success');\n        // console.log(response.data);\n\n        if (response.status === 200) {\n          setItem('expires_in', response.data.expires_in);\n          setItem('access_token', response.data.access_token);\n          setItem('token_created', response.data.token_created);\n\n          setState(prev => ({ ...prev, user: response.data.user }));\n\n          props.location.state === undefined ? props.history.replace('/dashboard') : props.history.replace(props.location.state.from.pathname);\n        }\n\n      })\n      .catch(error => {\n        // console.log('error', error.response);\n\n        if (error.response && error.response.status === 422) {\n          messages.show({ severity: 'error', detail: 'Incorrect email or password.', sticky: true });\n        }\n        else {\n          messages.show({ severity: 'error', detail: 'Something went wrong. Try again.', sticky: true });\n        }\n        setSubmitting(false);\n      })\n  };\n\n  return (\n    <div>\n      <Helmet title='Login' />\n      <div className=\"p-grid p-nogutter p-align-center p-justify-center\" style={{ height: '95vh' }}>\n        <Card className=\"p-sm-12 p-md-6 p-lg-4\" style={{ borderRadius: 5, minHeight: 65 }}>\n          <div className=\"p-col-12 p-fluid\">\n            <Messages ref={(el) => messages = el} />\n          </div>\n          <div className=\"p-col-12\">\n            <div className=\"p-card-title p-grid p-nogutter p-justify-between\">Login <LocaleToggle /></div>\n            <div className=\"p-card-subtitle\">Enter login credentials</div>\n          </div>\n\n          <form onSubmit={handleSubmit(submitLogin)}>\n            <div className=\"p-col-12 p-fluid\">\n              <div className=\"p-inputgroup\">\n                <span className=\"p-inputgroup-addon\"><i className=\"pi pi-envelope\" /></span>\n                <input type=\"text\" name=\"email\" placeholder={'Email'} ref={register} className=\"p-inputtext p-component p-filled\" />\n              </div>\n              <p className=\"text-error\">{errors.email?.message}</p>\n            </div>\n            <div className=\"p-col-12 p-fluid\">\n              <div className=\"p-inputgroup\">\n                <span className=\"p-inputgroup-addon\"><i className=\"pi pi-key\" /></span>\n                <input type=\"password\" name=\"password\" placeholder={'Password'} ref={register} className=\"p-inputtext p-component p-filled\" />\n              </div>\n              <p className=\"text-error\">{errors.password?.message}</p>\n            </div>\n            <div className=\"p-col-12 p-fluid\">\n              <Button disabled={submitting} type=\"submit\" label={'Sign In'} icon=\"pi pi-sign-in\" className=\"p-button-raised\" />\n            </div>\n            <div className=\"p-grid p-nogutter p-col-12 p-justify-center\">\n              <Link to=\"/register\">Register</Link>\n            </div>\n          </form>\n        </Card>\n      </div>\n    </div>\n  );\n};\n\nexport default React.memo(Login);\n","/home/tcg/my-workspace/Team-Serengetti/expense-tracker-app/client/src/app/auth/Register.jsx",[],"/home/tcg/my-workspace/Team-Serengetti/expense-tracker-app/client/src/app/layouts/DashboardLayout.jsx",[],"/home/tcg/my-workspace/Team-Serengetti/expense-tracker-app/client/src/API.js",[],"/home/tcg/my-workspace/Team-Serengetti/expense-tracker-app/client/src/Axios.js",[],"/home/tcg/my-workspace/Team-Serengetti/expense-tracker-app/client/src/app/layouts/LandingLayout.jsx",[],"/home/tcg/my-workspace/Team-Serengetti/expense-tracker-app/client/src/app/locale/LocaleToggle.jsx",[],"/home/tcg/my-workspace/Team-Serengetti/expense-tracker-app/client/src/app/dashboard/AppTopbar.jsx",["196","197","198"],"import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport ToolsSidebar from './../common/ToolsSidebar';\nimport { Link } from 'react-router-dom';\n\nconst AppTopbar = (props) => {\n\n  const [sidebarVisible, setSidebarVisible] = useState(false);\n\n  return (\n    <div>\n      <ToolsSidebar visible={sidebarVisible} position=\"right\" onHide={() => setSidebarVisible(false)}/>\n      <div className=\"layout-topbar clearfix\">\n        <a className=\"layout-menu-button\" onClick={props.onToggleMenu}>\n          <span className=\"pi pi-bars\" />\n        </a>\n        <div className=\"layout-topbar-icons\">\n          <a onClick={() => setSidebarVisible(true)}>\n            <span className=\"layout-topbar-item-text\">Tools</span>\n            <span className=\"layout-topbar-icon pi pi-briefcase\" />\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nAppTopbar.propTypes = {\n  onToggleMenu: PropTypes.func.isRequired,\n};\n\nexport default React.memo(AppTopbar);\n","/home/tcg/my-workspace/Team-Serengetti/expense-tracker-app/client/src/app/dashboard/AppInlineProfile.jsx",["199"],"import React from 'react';\nimport { useTracked } from './../../Store';\n\nconst AppInlineProfile = (props) => {\n\n  const [state] = useTracked();\n\n  return (\n    <div className=\"profile\">\n      <div>\n        <img src={require('./../../assets/user.png')} alt=\"logo\" />\n      </div>\n      <a href=\"#\" className=\"profile-link\" onClick={e => e.preventDefault()}>\n        <span className=\"username\">{state.user.name}</span>\n      </a>\n    </div>\n  );\n}\n\nexport default React.memo(AppInlineProfile);\n","/home/tcg/my-workspace/Team-Serengetti/expense-tracker-app/client/src/app/dashboard/AppMenu.jsx",[],"/home/tcg/my-workspace/Team-Serengetti/expense-tracker-app/client/src/app/dashboard/AppFooter.jsx",[],"/home/tcg/my-workspace/Team-Serengetti/expense-tracker-app/client/src/app/dashboard/Dashboard.jsx",["200"],"import React, { useEffect, useState } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { useForm, Controller } from 'react-hook-form';\nimport * as yup from 'yup';\nimport * as dayjs from 'dayjs';\n\nimport { Messages } from 'primereact/messages';\nimport { Card } from 'primereact/card';\nimport { Dropdown } from 'primereact/dropdown';\nimport { Calendar } from 'primereact/calendar';\nimport { Button } from 'primereact/button';\nimport { ProgressSpinner } from 'primereact/progressspinner';\n\nimport CurrencySidebar from './../common/CurrencySidebar';\nimport ExpenseListItem from './../expense/ExpenseListItem';\nimport IncomeListItem from './../income/IncomeListItem';\n\nimport { expenseApiEndpoints, incomeApiEndpoints, reportApiEndpoints } from './../../API';\nimport axios from './../../Axios';\nimport { useTracked } from './../../Store';\n\nlet messages;\n\nconst addExpenseValidationSchema = yup.object().shape({\n  expense_date: yup.string().required('Expense date field is required'),\n  category: yup.object().required('Expense category field is required'),\n  amount: yup.string().required('Expense amount field is required'),\n  spent_on: yup.string().required('Spent on field is required').max(100, 'Spent on must be at most 100 characters'),\n  remarks: yup.string().max(200, 'Remarks must be at most 200 characters'),\n});\n\nconst Dashboard = (props) => {\n\n  const [state] = useTracked();\n  const { register, handleSubmit, setValue, errors, setError, reset, control } = useForm({\n    validationSchema: addExpenseValidationSchema\n  });\n  const [submitting, setSubmitting] = useState(false);\n  const [currencyVisible, setCurrencyVisible] = useState(false);\n  const [recentExpense, setRecentExpense] = useState({ expense: [], expenseLoading: true });\n  const [recentIncome, setRecentIncome] = useState({ income: [], incomeLoading: true });\n  const [monthlyExpenseSummary, setMonthlyExpenseSummary] = useState({});\n  const [monthlyIncomeSummary, setMonthlyIncomeSummary] = useState({});\n  const [expenseCategories, setExpenseCategories] = useState([]);\n\n  useEffect(() => {\n    requestExpenseCategory();\n    requestExpense();\n    requestIncome();\n    requestExpenseSummary();\n    requestIncomeSummary();\n  }, []);\n\n\n  const requestExpenseCategory = async () => {\n    await axios.get(expenseApiEndpoints.expenseCategory + '?sort_col=category_name&sort_order=asc', {})\n      .then(response => {\n        // console.log(response.data);\n        if (response.data.data.length > 0) {\n          setExpenseCategories(response.data.data);\n        }\n        else {\n\n        }\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  };\n\n  const requestExpenseSummary = async () => {\n    await axios.get(reportApiEndpoints.monthlyExpenseSummary, {})\n      .then(response => {\n        // console.log(response.data);\n        setMonthlyExpenseSummary(response.data.data)\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  };\n\n  const requestIncomeSummary = async () => {\n    await axios.get(reportApiEndpoints.monthlyIncomeSummary, {})\n      .then(response => {\n        // console.log(response.data);\n        setMonthlyIncomeSummary(response.data.data);\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  };\n\n  const requestExpense = async () => {\n    await axios.get(expenseApiEndpoints.expense + '?per_page=5&sort_order=desc', {})\n      .then(response => {\n        // console.log(response.data);\n        setRecentExpense({\n          ...recentExpense,\n          expense: response.data.data,\n          expenseLoading: false\n        });\n      })\n      .catch(error => {\n        console.log('error', error);\n        setRecentExpense({\n          ...recentExpense,\n          expenseLoading: false\n        });\n      });\n  };\n\n  const requestIncome = async () => {\n    await axios.get(incomeApiEndpoints.income + '?per_page=5&sort_order=desc', {})\n      .then(response => {\n        // console.log(response.data);\n        setRecentIncome({\n          ...recentIncome,\n          income: response.data.data,\n          incomeLoading: false\n        });\n      })\n      .catch(error => {\n        console.log('error', error);\n        setRecentIncome({\n          ...recentIncome,\n          incomeLoading: false\n        });\n      });\n  };\n\n  const submitExpense = (data) => {\n\n    data.category_id = data.category.id;\n    data.currency_id = state.currentCurrency.id;\n    data.expense_date = dayjs(data.expense_date).format('YYYY-MM-DD HH:mm:ss');\n\n    axios.post(expenseApiEndpoints.expense, JSON.stringify(data))\n      .then(response => {\n        // console.log('success');\n        if (response.status === 201) {\n          reset();\n          setSubmitting(false);\n          setValue('expense_date', dayjs(response.data.request.expense_date).toDate());\n          requestExpense();\n          requestExpenseSummary();\n\n          messages.show({\n            severity: 'success',\n            detail: 'Your expense on ' + response.data.request.spent_on + ' added.',\n            sticky: false,\n            closable: false,\n            life: 5000\n          });\n        }\n      })\n      .catch(error => {\n        console.log('error', error.response);\n\n        if (error.response.status === 401) {\n          messages.clear();\n          messages.show({\n            severity: 'error',\n            detail: 'Something went wrong. Try again.',\n            sticky: true,\n            closable: true,\n            life: 5000\n          });\n        }\n        else if (error.response.status === 422) {\n          let errors = Object.entries(error.response.data).map(([key, value]) => {\n            return { name: key, message: value[0] }\n          });\n          setError(errors);\n        }\n\n        setSubmitting(false)\n      })\n  };\n\n  const renderRecentExpense = () => {\n    if (recentExpense.expenseLoading) {\n      return (\n        <div className=\"p-grid p-nogutter p-justify-center\">\n          <ProgressSpinner style={{ height: '25px' }} strokeWidth={'4'} />\n        </div>\n      );\n    }\n    else {\n      if (recentExpense.expense.length > 0) {\n        return recentExpense.expense.map((item, index) => {\n          return <ExpenseListItem key={item.id} itemDetail={item} />;\n        })\n      }\n      else {\n        return (\n          <div className=\"p-grid p-nogutter p-justify-center\">\n            <h4 className=\"color-subtitle\">Spend some cash to see recent.</h4>\n          </div>\n        );\n      }\n    }\n  };\n\n  const renderRecentIncome = () => {\n    if (recentIncome.incomeLoading) {\n      return (\n        <div className=\"p-grid p-nogutter p-justify-center\">\n          <ProgressSpinner style={{ height: '25px' }} strokeWidth={'4'} />\n        </div>\n      );\n    }\n    else {\n      if (recentIncome.income.length > 0) {\n        return recentIncome.income.map((item, index) => {\n          return <IncomeListItem key={item.id} itemDetail={item} />;\n        })\n      }\n      else {\n        return (\n          <div className=\"p-grid p-nogutter p-justify-center\">\n            <h4 className=\"color-subtitle\">Add some earnings to see recent.</h4>\n          </div>\n        );\n      }\n    }\n  };\n\n  const renderSummary = (data) => {\n    if (data && data.length > 0) {\n      return data.map((item, index) => {\n        return <div key={index}>\n          <div className=\"color-link text-center\">{item.total.toLocaleString()} <span className=\"color-title\">{item.currency_code + '.'}</span></div>\n          <hr />\n        </div>\n      })\n    }\n    else if (typeof data === \"object\" && Object.values(data).length > 0) {\n      return Object.values(data).map((item, index) => {\n        return <div key={index}>\n          <div className=\"color-link text-center\">{item.total.toLocaleString()} <span className=\"color-title\">{item.currency_code + '.'}</span></div>\n          <hr />\n        </div>\n      })\n    }\n    else {\n      return <div>\n        <div className=\"text-center\">No transaction data found.</div>\n        <hr />\n      </div>\n    }\n  };\n\n  return (\n    <div>\n      <Helmet title=\"Dashboard\" />\n\n      <CurrencySidebar visible={currencyVisible} onHide={(e) => setCurrencyVisible(false)} />\n\n      <div className=\"p-grid p-nogutter\">\n        <div className=\"p-col-12\">\n          <div className=\"p-fluid\">\n            <Messages ref={(el) => messages = el} />\n          </div>\n        </div>\n      </div>\n\n      <div className=\"p-grid\">\n        <div className=\"p-col-12\">\n          <div className=\"p-fluid\">\n\n            <div className=\"p-grid\">\n              <div className=\"p-col-6 p-md-3\">\n                <div className=\"p-panel p-component\">\n                  <div className=\"p-panel-titlebar\"><span className=\"color-title text-bold\">Expense Last Month</span>\n                  </div>\n                  <div className=\"p-panel-content-wrapper p-panel-content-wrapper-expanded\" id=\"pr_id_1_content\"\n                    aria-labelledby=\"pr_id_1_label\" aria-hidden=\"false\">\n                    <div className=\"p-panel-content\">\n                      {renderSummary(monthlyExpenseSummary.expense_last_month)}\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"p-col-6 p-md-3\">\n                <div className=\"p-panel p-component\">\n                  <div className=\"p-panel-titlebar\"><span className=\"color-title text-bold\">Expense This Month</span></div>\n                  <div className=\"p-panel-content-wrapper p-panel-content-wrapper-expanded\" id=\"pr_id_1_content\"\n                    aria-labelledby=\"pr_id_1_label\" aria-hidden=\"false\">\n                    <div className=\"p-panel-content\">\n                      {renderSummary(monthlyExpenseSummary.expense_this_month)}\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"p-col-6 p-md-3\">\n                <div className=\"p-panel p-component\">\n                  <div className=\"p-panel-titlebar\"><span className=\"color-title text-bold\">Income Last Month</span>\n                  </div>\n                  <div className=\"p-panel-content-wrapper p-panel-content-wrapper-expanded\" id=\"pr_id_1_content\"\n                    aria-labelledby=\"pr_id_1_label\" aria-hidden=\"false\">\n                    <div className=\"p-panel-content\">\n                      {renderSummary(monthlyIncomeSummary.income_last_month)}\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"p-col-6 p-md-3\">\n                <div className=\"p-panel p-component\">\n                  <div className=\"p-panel-titlebar\"><span className=\"color-title text-bold\">Income This Month</span></div>\n                  <div className=\"p-panel-content-wrapper p-panel-content-wrapper-expanded\" id=\"pr_id_1_content\"\n                    aria-labelledby=\"pr_id_1_label\" aria-hidden=\"false\">\n                    <div className=\"p-panel-content\">\n                      {renderSummary(monthlyIncomeSummary.income_this_month)}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n          </div>\n        </div>\n      </div>\n\n      <div className=\"p-grid\">\n\n        <div className=\"p-col-12 p-md-6 p-lg-4\">\n          <Card className=\"rounded-border\">\n            <div>\n              <div className=\"p-card-title p-grid p-nogutter p-justify-between\">Expense Info</div>\n              <div className=\"p-card-subtitle\">Enter your expense information below.</div>\n            </div>\n            <br />\n            <form onSubmit={handleSubmit(submitExpense)}>\n              <div className=\"p-fluid\">\n                <Controller\n                  name=\"expense_date\"\n                  defaultValue={new Date()}\n                  onChange={([e]) => {\n                    // console.log(e);\n                    return e.value;\n                  }}\n                  control={control}\n                  as={\n                    <Calendar\n                      dateFormat=\"yy-mm-dd\"\n                      showTime={true}\n                      hourFormat=\"12\"\n                      showButtonBar={true}\n                      maxDate={new Date()}\n                      touchUI={window.innerWidth < 768}\n                    />\n                  }\n                />\n                <p className=\"text-error\">{errors.expense_date?.message}</p>\n              </div>\n              <div className=\"p-fluid\">\n                <Controller\n                  name=\"category\"\n                  onChange={([e]) => {\n                    return e.value\n                  }}\n                  control={control}\n                  as={\n                    <Dropdown\n                      filter={true}\n                      filterPlaceholder=\"Search here\"\n                      showClear={true}\n                      filterInputAutoFocus={false}\n                      options={expenseCategories}\n                      style={{ width: '100%' }}\n                      placeholder=\"Expense Category\"\n                      optionLabel=\"category_name\"\n                    />\n                  }\n                />\n                <p className=\"text-error\">{errors.category?.message}</p>\n              </div>\n              <div className=\"p-fluid\">\n                <input type=\"text\" ref={register} placeholder=\"Spent On\" name=\"spent_on\" className=\"p-inputtext p-component p-filled\" />\n                <p className=\"text-error\">{errors.spent_on?.message}</p>\n              </div>\n              <div className=\"p-fluid\">\n                <div className=\"p-inputgroup\">\n                  <input type=\"number\" step=\"0.00\" ref={register} keyfilter=\"money\" placeholder=\"Amount\" name=\"amount\" className=\"p-inputtext p-component p-filled\" />\n                  <Button\n                    label={`${state.currencies.length === 0 ? 'loading' : state.currentCurrency.currency_code}`}\n                    type=\"button\"\n                    onClick={(e) => setCurrencyVisible(true)} />\n                </div>\n                <p className=\"text-error\">{errors.amount?.message}</p>\n              </div>\n              <div className=\"p-fluid\">\n                <textarea ref={register} rows={5} placeholder=\"Remarks\" name=\"remarks\" className=\"p-inputtext p-inputtextarea p-component p-inputtextarea-resizable\" />\n                <p className=\"text-error\">{errors.remarks?.message}</p>\n              </div>\n              <div className=\"p-fluid\">\n                <Button disabled={submitting} type=\"submit\" label=\"Add Expense\" icon=\"pi pi-plus\"\n                  className=\"p-button-raised\" />\n              </div>\n            </form>\n          </Card>\n        </div>\n\n        <div className=\"p-col-12 p-md-6 p-lg-4\">\n          <Card className=\"rounded-border\">\n            <div>\n              <div className=\"p-card-title p-grid p-nogutter p-justify-between\">Recent Expenses -</div>\n              <div className=\"p-card-subtitle\">Here are few expenses you've made.</div>\n            </div>\n            <br />\n            <div>\n              {renderRecentExpense()}\n            </div>\n          </Card>\n        </div>\n\n        <div className=\"p-col-12 p-md-6 p-lg-4\">\n          <Card className=\"rounded-border\">\n            <div>\n              <div className=\"p-card-title p-grid p-nogutter p-justify-between\">Recent Incomes +</div>\n              <div className=\"p-card-subtitle\">Here are few incomes you've added.</div>\n            </div>\n            <br />\n            <div>\n              {renderRecentIncome()}\n            </div>\n          </Card>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default React.memo(Dashboard);\n","/home/tcg/my-workspace/Team-Serengetti/expense-tracker-app/client/src/app/dashboard/ScrollToTop.jsx",[],"/home/tcg/my-workspace/Team-Serengetti/expense-tracker-app/client/src/app/expense/ExpenseCategory.jsx",["201"],"import React, { useState, useEffect } from 'react';\nimport { Helmet } from 'react-helmet';\nimport * as yup from 'yup';\nimport { Link } from \"react-router-dom\";\nimport { useForm } from 'react-hook-form';\nimport Swal from 'sweetalert2';\n\nimport { Messages } from 'primereact/messages';\nimport { Card } from 'primereact/card';\nimport { Button } from 'primereact/button';\nimport { DataTable } from 'primereact/datatable';\nimport { ProgressSpinner } from 'primereact/progressspinner';\nimport { Column } from 'primereact/column';\n\nimport { expenseApiEndpoints } from './../../API';\nimport axios from './../../Axios';\n\nconst StyledSwal = Swal.mixin({\n  customClass: {\n    container: 'container-class',\n    popup: 'popup-class',\n    header: 'header-class',\n    title: 'p-card-title',\n    content: 'content-class',\n    closeButton: 'close-button-class',\n    image: 'image-class',\n    input: 'input-class',\n    actions: 'actions-class',\n    confirmButton: 'p-button p-button-raised p-button-danger p-button-text-icon-left',\n    cancelButton: 'p-button p-button-raised p-button-info p-button-text-icon-left',\n    footer: 'footer-class'\n  },\n  buttonsStyling: false\n});\n\nlet messages;\n\nconst expenseCategoryValidationSchema = yup.object().shape({\n  category_name: yup.string().required('Category name field is required').max(100, 'Category name must be at most 100 characters'),\n});\n\nconst ExpenseCategory = (props) => {\n\n  const { register, handleSubmit, reset, errors, setError } = useForm({\n    validationSchema: expenseCategoryValidationSchema\n  });\n  const [datatable, setDatatable] = useState({\n    sortField: 'id',\n    sortOrder: -1,\n    rowsPerPage: 5,\n    currentPage: 1\n  });\n  const [expenseCategories, setExpenseCategories] = useState({\n    categories: {},\n    fetching: true\n  });\n  const [submitting, setSubmitting] = useState(false);\n\n  useEffect(() => {\n    requestExpenseCategories();\n  }, [datatable]);\n\n  const requestExpenseCategories = async () => {\n    setExpenseCategories({ ...expenseCategories, fetching: true });\n    await axios.get(expenseApiEndpoints.expenseCategory + '?page=' + datatable.currentPage + '&per_page=' + datatable.rowsPerPage + '&sort_col=' + datatable.sortField + '&sort_order=' + (datatable.sortOrder === 1 ? 'asc' : 'desc'), {})\n      .then(response => {\n        // console.log(response.data);\n        if (response.data.data) {\n          setExpenseCategories({\n            ...expenseCategories,\n            categories: response.data,\n            fetching: false\n          });\n        }\n        else {\n\n        }\n      })\n      .catch(error => {\n        // console.log(error);\n      });\n  };\n\n  const deleteExpenseCategory = (data) => {\n    // console.log(data);\n    StyledSwal.fire({\n      title: 'Are you sure?',\n      text: `Confirm to delete expense category ${data.category_name}.`,\n      icon: 'warning',\n      showCancelButton: true,\n      confirmButtonText: '<span class=\"pi pi-trash p-button-icon-left\"></span><span class=\"p-button-text\">Delete</span>',\n      cancelButtonText: '<span class=\"pi pi-ban p-button-icon-left\"></span><span class=\"p-button-text\">No</span>',\n      // confirmButtonColor: '#f76452',\n      // cancelButtonColor: '#3085d6',\n      focusConfirm: false,\n      focusCancel: true\n    }).then((result) => {\n      if (result.value) {\n        axios.delete(expenseApiEndpoints.expenseCategory + '/' + data.id, {})\n          .then(response => {\n            // console.log(response.data);\n            if (response.status === 200) {\n\n              requestExpenseCategories();\n\n              messages.show({\n                severity: 'success',\n                detail: 'Your expense category ' + data.category_name + ' deleted successfully.',\n                sticky: false,\n                closable: false,\n                life: 5000\n              });\n            }\n\n          })\n          .catch(error => {\n            // console.log('error', error.response);\n            if (error.response.status === 404) {\n              messages.clear();\n              messages.show({\n                severity: 'error',\n                detail: 'Expense category ' + data.category_name + ' in use.',\n                sticky: true,\n                closable: true,\n                life: 5000\n              });\n            }\n\n            if (error.response.status === 401) {\n              messages.clear();\n              messages.show({\n                severity: 'error',\n                detail: 'Something went wrong. Try again.',\n                sticky: true,\n                closable: true,\n                life: 5000\n              });\n            }\n\n          });\n      }\n    });\n  };\n\n  const submitExpenseCategory = (data) => {\n    axios.post(expenseApiEndpoints.expenseCategory, JSON.stringify(data))\n      .then(response => {\n        // console.log('success', response.data);\n        if (response.status === 201) {\n\n          reset();\n          setSubmitting(false);\n          requestExpenseCategories();\n\n          messages.show({\n            severity: 'success',\n            detail: 'New expense category ' + response.data.request.category_name + ' added.',\n            sticky: false,\n            closable: false,\n            life: 5000\n          });\n        }\n\n      })\n      .catch(error => {\n        // console.log('error', error.response);\n        if (error.response.status === 401) {\n          messages.clear();\n          messages.show({\n            severity: 'error',\n            detail: 'Something went wrong. Try again.',\n            sticky: true,\n            closable: true,\n            life: 5000\n          });\n        }\n\n        if (error.response.status === 422) {\n          let errors = Object.entries(error.response.data).map(([key, value]) => {\n            return { name: key, message: value[0] }\n          });\n          setError(errors);\n        }\n\n        setSubmitting(false)\n      })\n  };\n\n  return (\n    <div>\n      <Helmet title=\"Expense Category\" />\n\n      <div className=\"p-grid p-nogutter\">\n        <div className=\"p-col-12\">\n          <div className=\"p-fluid\">\n            <Messages ref={(el) => messages = el} />\n          </div>\n        </div>\n      </div>\n\n      <div className=\"p-grid\">\n\n        <div className=\"p-col-12 p-md-6\">\n          <Card className=\"rounded-border\">\n            <div>\n              <div className=\"p-card-title p-grid p-nogutter p-justify-between\">Add Expense Category</div>\n              <div className=\"p-card-subtitle\">Enter expense category name below.</div>\n            </div>\n            <br />\n            <form onSubmit={handleSubmit(submitExpenseCategory)}>\n              <div className=\"p-fluid\">\n                <input type=\"text\" ref={register} placeholder=\"Category name\" name=\"category_name\" className=\"p-inputtext p-component p-filled\" />\n                <p className=\"text-error\">{errors.category_name?.message}</p>\n              </div>\n              <div className=\"p-fluid\">\n                <Button disabled={submitting} type=\"submit\" label=\"Add Category\" icon=\"pi pi-plus\"\n                  className=\"p-button-raised\" />\n              </div>\n            </form>\n          </Card>\n        </div>\n\n        <div className=\"p-col-12 p-md-6\">\n          <Card className=\"rounded-border\">\n            <div className='p-grid'>\n              <div className='p-col-6'>\n                <div className=\"p-card-title p-grid p-nogutter p-justify-between\">View Expenses Categories</div>\n                <div className=\"p-card-subtitle\">Here are list of expense categories.</div>\n              </div>\n              <div className=\"p-col-6\" align=\"right\">\n                {expenseCategories.fetching ? <ProgressSpinner style={{ height: '25px', width: '25px' }} strokeWidth={'4'} /> : ''}\n              </div>\n            </div>\n            <br />\n            <DataTable\n              value={expenseCategories.categories.data}\n              sortField={datatable.sortField}\n              sortOrder={datatable.sortOrder}\n              responsive={true}\n              paginator={true}\n              rows={datatable.rowsPerPage}\n              rowsPerPageOptions={[5, 10, 20]}\n              totalRecords={expenseCategories.categories.total}\n              lazy={true}\n              first={expenseCategories.categories.from - 1}\n              onPage={(e) => {\n                // console.log(e);\n                setDatatable({\n                  ...datatable,\n                  currentPage: (e.page + 1),\n                  rowsPerPage: e.rows,\n                });\n              }}\n              onSort={e => {\n                // console.log(e);\n                setDatatable({\n                  ...datatable,\n                  sortField: e.sortField,\n                  sortOrder: e.sortOrder,\n                })\n              }}\n              className=\"text-center\"\n            >\n              <Column field=\"id\" header=\"Serial\" sortable={true} />\n              <Column field=\"category_name\" header=\"Category Name\" sortable={true} />\n              <Column\n                body={(rowData, column) => {\n                  // console.log(rowData);\n                  return (\n                    <div>\n                      <Link to={`/expense/category/${rowData.id}/edit`}><Button label=\"Edit\"\n                        value={rowData.id}\n                        icon=\"pi pi-pencil\"\n                        className=\"p-button-raised p-button-rounded p-button-info\" /></Link>\n                      <Button label=\"Delete\"\n                        onClick={() => deleteExpenseCategory(rowData)}\n                        icon=\"pi pi-trash\"\n                        className=\"p-button-raised p-button-rounded p-button-danger\" />\n                    </div>\n                  )\n                }}\n                header=\"Action\"\n                style={{ textAlign: 'center', width: '8em' }}\n              />\n            </DataTable>\n          </Card>\n        </div>\n\n      </div>\n    </div>\n\n  )\n}\n\nexport default React.memo(ExpenseCategory);\n","/home/tcg/my-workspace/Team-Serengetti/expense-tracker-app/client/src/app/expense/Expense.jsx",["202"],"import React, { useState, useEffect } from 'react';\nimport { Helmet } from 'react-helmet';\nimport * as yup from 'yup';\nimport * as dayjs from 'dayjs';\nimport Swal from 'sweetalert2';\nimport { Link } from 'react-router-dom';\nimport { useForm, Controller } from 'react-hook-form';\n\nimport { Messages } from 'primereact/messages';\nimport { Card } from 'primereact/card';\nimport { Button } from 'primereact/button';\nimport { DataTable } from 'primereact/datatable';\nimport { Column } from 'primereact/column';\nimport { ProgressSpinner } from 'primereact/progressspinner';\nimport { Dropdown } from 'primereact/dropdown';\nimport { Calendar } from 'primereact/calendar';\n\nimport CurrencySidebar from './../common/CurrencySidebar';\n\nimport axios from './../../Axios';\nimport { expenseApiEndpoints } from './../../API';\nimport { useTracked } from './../../Store';\n\n\nconst StyledSwal = Swal.mixin({\n  customClass: {\n    container: 'container-class',\n    popup: 'popup-class',\n    header: 'header-class',\n    title: 'p-card-title',\n    content: 'content-class',\n    closeButton: 'close-button-class',\n    image: 'image-class',\n    input: 'input-class',\n    actions: 'actions-class',\n    confirmButton: 'p-button p-button-raised p-button-danger p-button-text-icon-left',\n    cancelButton: 'p-button p-button-raised p-button-info p-button-text-icon-left',\n    footer: 'footer-class'\n  },\n  buttonsStyling: false\n});\n\nlet messages;\n\nconst addExpenseValidationSchema = yup.object().shape({\n  expense_date: yup.string().required('Expense date field is required'),\n  category: yup.object().required('Expense category field is required'),\n  amount: yup.string().required('Expense amount field is required'),\n  spent_on: yup.string().required('Spent on field is required').max(100, 'Spent on must be at most 100 characters'),\n  remarks: yup.string().max(200, 'Remarks must be at most 200 characters'),\n});\n\nconst Expense = (props) => {\n\n  const [state] = useTracked();\n  const { register, handleSubmit, setValue, errors, setError, reset, control } = useForm({\n    validationSchema: addExpenseValidationSchema\n  });\n  const [datatable, setDatatable] = useState({\n    sortField: 'id',\n    sortOrder: -1,\n    rowsPerPage: 5,\n    currentPage: 1\n  });\n  const [currencyVisible, setCurrencyVisible] = useState(false);\n  const [expenseSummary, setExpenseSummary] = useState({});\n  const [submitting, setSubmitting] = useState(false);\n  const [expenseCategories, setExpenseCategories] = useState([]);\n  const [expense, setExpense] = useState({ expenses: {}, fetching: true });\n\n  useEffect(() => {\n    requestExpenseSummary();\n    requestExpenseCategory();\n  }, []);\n\n  useEffect(() => {\n    requestExpense();\n  }, [datatable]);\n\n  const requestExpenseCategory = async () => {\n    await axios.get(expenseApiEndpoints.expenseCategory + '?sort_col=category_name&sort_order=asc', {})\n      .then(response => {\n        // console.log(response.data);\n        if (response.data.data.length > 0) {\n          setExpenseCategories(response.data.data);\n        }\n        else {\n\n        }\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  };\n\n  const requestExpense = async () => {\n    setExpense({ ...expense, fetching: true });\n    await axios.get(expenseApiEndpoints.expense + '?page=' + datatable.currentPage + '&sort_col=' + datatable.sortField + '&per_page=' + datatable.rowsPerPage + '&sort_order=' + (datatable.sortOrder > 0 ? 'asc' : 'desc'), {})\n      .then(response => {\n        // console.log('success', response.data);\n        if (response.data.data) {\n          setExpense({\n            ...expense,\n            expenses: response.data,\n            fetching: false\n          });\n        }\n        else {\n          setExpense({\n            ...expense,\n            fetching: false\n          });\n        }\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  };\n\n  const requestExpenseSummary = async () => {\n    await axios.get(expenseApiEndpoints.summary, {})\n      .then(response => {\n        // console.log(response.data);\n        setExpenseSummary(response.data.data);\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  };\n\n  const deleteExpense = (data) => {\n    // console.log(data);\n    StyledSwal.fire({\n      title: 'Are you sure?',\n      text: `Confirm to delete expense on ${data.spent_on}.`,\n      icon: 'warning',\n      showCancelButton: true,\n      confirmButtonText: '<span class=\"pi pi-trash p-button-icon-left\"></span><span class=\"p-button-text\">Delete</span>',\n      cancelButtonText: '<span class=\"pi pi-ban p-button-icon-left\"></span><span class=\"p-button-text\">No</span>',\n      // confirmButtonColor: '#f76452',\n      // cancelButtonColor: '#3085d6',\n      focusConfirm: false,\n      focusCancel: true\n    })\n      .then((result) => {\n        if (result.value) {\n          axios.delete(expenseApiEndpoints.expense + '/' + data.id, {})\n            .then(response => {\n              // console.log(response.data);\n              if (response.status === 200) {\n\n                requestExpense();\n                requestExpenseSummary();\n\n                messages.show({\n                  severity: 'success',\n                  detail: 'Your expense on ' + data.spent_on + ' deleted successfully.',\n                  sticky: false,\n                  closable: false,\n                  life: 5000\n                });\n              }\n\n            })\n            .catch(error => {\n              console.log('error', error.response);\n\n              if (error.response.status === 401) {\n                messages.clear();\n                messages.show({\n                  severity: 'error',\n                  detail: 'Something went wrong. Try again.',\n                  sticky: true,\n                  closable: true,\n                  life: 5000\n                });\n              }\n\n            });\n        }\n      });\n  };\n\n  const submitExpense = (data) => {\n\n    data.category_id = data.category.id;\n    data.currency_id = state.currentCurrency.id;\n    data.expense_date = dayjs(data.expense_date).format('YYYY-MM-DD HH:mm:ss');\n\n    axios.post(expenseApiEndpoints.expense, JSON.stringify(data))\n      .then(response => {\n        // console.log('success');\n        if (response.status === 201) {\n          reset();\n          setSubmitting(false);\n          setValue('expense_date', dayjs(response.data.request.expense_date).toDate());\n          requestExpense();\n          requestExpenseSummary();\n\n          messages.show({\n            severity: 'success',\n            detail: 'Your expense on ' + response.data.request.spent_on + ' added.',\n            sticky: false,\n            closable: false,\n            life: 5000\n          });\n        }\n      })\n      .catch(error => {\n        console.log('error', error.response);\n\n        if (error.response.status === 401) {\n          messages.clear();\n          messages.show({\n            severity: 'error',\n            detail: 'Something went wrong. Try again.',\n            sticky: true,\n            closable: true,\n            life: 5000\n          });\n        }\n        else if (error.response.status === 422) {\n          let errors = Object.entries(error.response.data).map(([key, value]) => {\n            return { name: key, message: value[0] }\n          });\n          setError(errors);\n        }\n\n        setSubmitting(false)\n      })\n  };\n\n  const renderExpenseSummary = (data) => {\n    if (data && data.length > 0) {\n      return data.map((item, index) => {\n        return <div key={index}>\n          <div className=\"color-link text-center\">{item.total.toLocaleString()} <span className=\"color-title\">{item.currency_code + '.'}</span></div>\n          <hr />\n        </div>\n      })\n    }\n    else {\n      return <div>\n        <div className=\"text-center\">No expense data found.</div>\n        <hr />\n      </div>\n    }\n  };\n\n  return (\n    <div>\n      <Helmet title=\"Expense\" />\n\n      <CurrencySidebar visible={currencyVisible} onHide={(e) => setCurrencyVisible(false)} />\n\n      <div className=\"p-grid p-nogutter\">\n        <div className=\"p-col-12\">\n          <div className=\"p-fluid\">\n            <Messages ref={(el) => messages = el} />\n          </div>\n        </div>\n      </div>\n\n      <div className=\"p-grid\">\n        <div className=\"p-col-12\">\n          <div className=\"p-fluid\">\n\n            <div className=\"p-grid\">\n              <div className=\"p-col-6\">\n                <div className=\"p-panel p-component\">\n                  <div className=\"p-panel-titlebar\"><span className=\"color-title text-bold\">Expense This Month</span>\n                  </div>\n                  <div className=\"p-panel-content-wrapper p-panel-content-wrapper-expanded\" id=\"pr_id_1_content\"\n                    aria-labelledby=\"pr_id_1_label\" aria-hidden=\"false\">\n                    <div className=\"p-panel-content\">\n                      {renderExpenseSummary(expenseSummary.expense_month)}\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"p-col-6\">\n                <div className=\"p-panel p-component\">\n                  <div className=\"p-panel-titlebar\"><span className=\"color-title text-bold\">Expense Today</span></div>\n                  <div className=\"p-panel-content-wrapper p-panel-content-wrapper-expanded\" id=\"pr_id_1_content\"\n                    aria-labelledby=\"pr_id_1_label\" aria-hidden=\"false\">\n                    <div className=\"p-panel-content\">\n                      {renderExpenseSummary(expenseSummary.expense_today)}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n          </div>\n        </div>\n      </div>\n\n      <div className=\"p-grid\">\n\n        <div className=\"p-col-12 p-md-6\">\n          <Card className=\"rounded-border\">\n            <div>\n              <div className=\"p-card-title p-grid p-nogutter p-justify-between\">Add Expense</div>\n              <div className=\"p-card-subtitle\">Add your expense information below.</div>\n            </div>\n            <br />\n            <form onSubmit={handleSubmit(submitExpense)}>\n              <div className=\"p-fluid\">\n                <Controller\n                  name=\"expense_date\"\n                  defaultValue={new Date()}\n                  onChange={([e]) => {\n                    // console.log(e);\n                    return e.value;\n                  }}\n                  control={control}\n                  as={\n                    <Calendar\n                      dateFormat=\"yy-mm-dd\"\n                      showTime={true}\n                      hourFormat=\"12\"\n                      showButtonBar={true}\n                      maxDate={new Date()}\n                      touchUI={window.innerWidth < 768}\n                    />\n                  }\n                />\n                <p className=\"text-error\">{errors.expense_date?.message}</p>\n              </div>\n              <div className=\"p-fluid\">\n                <Controller\n                  name=\"category\"\n                  onChange={([e]) => {\n                    return e.value\n                  }}\n                  control={control}\n                  as={\n                    <Dropdown\n                      filter={true}\n                      filterPlaceholder=\"Search here\"\n                      showClear={true}\n                      filterInputAutoFocus={false}\n                      options={expenseCategories}\n                      style={{ width: '100%' }}\n                      placeholder=\"Expense Category\"\n                      optionLabel=\"category_name\"\n                    />\n                  }\n                />\n                <p className=\"text-error\">{errors.category?.message}</p>\n              </div>\n              <div className=\"p-fluid\">\n                <input type=\"text\" ref={register} placeholder=\"Spent On\" name=\"spent_on\" className=\"p-inputtext p-component p-filled\" />\n                <p className=\"text-error\">{errors.spent_on?.message}</p>\n              </div>\n              <div className=\"p-fluid\">\n                <div className=\"p-inputgroup\">\n                  <input type=\"number\" step=\"0.00\" ref={register} keyfilter=\"money\" placeholder=\"Amount\" name=\"amount\" className=\"p-inputtext p-component p-filled\" />\n                  <Button\n                    label={`${state.currencies.length === 0 ? 'loading' : state.currentCurrency.currency_code}`}\n                    type=\"button\"\n                    onClick={(e) => setCurrencyVisible(true)} />\n                </div>\n                <p className=\"text-error\">{errors.amount?.message}</p>\n              </div>\n              <div className=\"p-fluid\">\n                <textarea ref={register} rows={5} placeholder=\"Remarks\" name=\"remarks\" className=\"p-inputtext p-inputtextarea p-component p-inputtextarea-resizable\" />\n                <p className=\"text-error\">{errors.remarks?.message}</p>\n              </div>\n              <div className=\"p-fluid\">\n                <Button disabled={submitting} type=\"submit\" label=\"Add Expense\" icon=\"pi pi-plus\"\n                  className=\"p-button-raised\" />\n              </div>\n            </form>\n          </Card>\n        </div>\n\n        <div className=\"p-col-12 p-md-6\">\n          <Card className=\"rounded-border\">\n            <div className='p-grid'>\n              <div className='p-col-6'>\n                <div className=\"p-card-title p-grid p-nogutter p-justify-between\">View Expenses</div>\n                <div className=\"p-card-subtitle\">Here are few expenses you've added.</div>\n              </div>\n              <div className=\"p-col-6\" align=\"right\">\n                {expense.fetching ? <ProgressSpinner style={{ height: '25px', width: '25px' }} strokeWidth={'4'} /> : ''}\n              </div>\n            </div>\n            <br />\n            <DataTable\n              value={expense.expenses.data}\n              sortField={datatable.sortField}\n              sortOrder={datatable.sortOrder}\n              responsive={true}\n              paginator={true}\n              rows={datatable.rowsPerPage}\n              rowsPerPageOptions={[5, 10, 20]}\n              totalRecords={expense.expenses.total}\n              lazy={true}\n              first={expense.expenses.from - 1}\n              onPage={(e) => {\n                // console.log(e);\n                setDatatable({\n                  ...datatable,\n                  currentPage: (e.page + 1),\n                  rowsPerPage: e.rows,\n                });\n              }}\n              onSort={e => {\n                // console.log(e);\n                setDatatable({\n                  ...datatable,\n                  sortField: e.sortField,\n                  sortOrder: e.sortOrder,\n                });\n              }}\n              className=\"text-center\"\n            >\n              <Column field=\"id\" header=\"Serial\" sortable={true} />\n              <Column field=\"spent_on\" header=\"Spent On\" sortable={true} />\n              <Column field=\"category_name\" header=\"Category\" sortable={true} />\n              <Column field=\"amount\" header=\"Amount\" sortable={true}\n                body={(rowData, column) => {\n                  return rowData.amount.toLocaleString() + ' ' + rowData.currency_name\n                }}\n              />\n              <Column field=\"transaction_date\" header=\"Date\" sortable={true}\n                body={(rowData, column) => {\n                  return dayjs(rowData.transaction_date).format('YYYY-MM-DD hh:mm a')\n                }}\n              />\n              <Column\n                body={(rowData, column) => {\n                  // console.log(rowData);\n                  return (\n                    <div>\n                      <Link to={`/expense/${rowData.id}/edit`}>\n                        <Button label=\"Edit\" value={rowData.id}\n                          icon=\"pi pi-pencil\"\n                          className=\"p-button-raised p-button-rounded p-button-info\" />\n                      </Link>\n                      <Button label=\"Delete\"\n                        onClick={() => deleteExpense(rowData)}\n                        icon=\"pi pi-trash\"\n                        className=\"p-button-raised p-button-rounded p-button-danger\" />\n                    </div>\n                  )\n                }}\n                header=\"Action\"\n                style={{ textAlign: 'center', width: '8em' }}\n              />\n            </DataTable>\n          </Card>\n        </div>\n\n      </div>\n    </div>\n\n  )\n}\n\nexport default Expense;\n","/home/tcg/my-workspace/Team-Serengetti/expense-tracker-app/client/src/app/expense/EditExpense.jsx",["203"],"import React, { useEffect, useState } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { useForm, Controller } from 'react-hook-form';\nimport * as dayjs from 'dayjs';\nimport * as yup from 'yup';\n\nimport { Messages } from 'primereact/messages';\nimport { Card } from 'primereact/card';\nimport { Button } from 'primereact/button';\nimport { Calendar } from 'primereact/calendar';\nimport { Dropdown } from 'primereact/dropdown';\n\nimport CurrencySidebar from './../common/CurrencySidebar';\n\nimport { expenseApiEndpoints } from './../../API';\nimport axios from './../../Axios';\nimport { useTracked } from './../../Store';\n\nlet messages;\n\nconst editExpenseValidationSchema = yup.object().shape({\n  expense_date: yup.string().required('Expense date field is required'),\n  category: yup.object().required('Expense category field is required'),\n  amount: yup.number().required('Expense amount field is required'),\n  spent_on: yup.string().required('Spent on field is required').max(100, 'Spent on must be at most 100 characters'),\n  remarks: yup.string().max(200, 'Remarks must be at most 200 characters'),\n});\n\nconst EditExpense = (props) => {\n\n  const [state, setState] = useTracked();\n  const { register, handleSubmit, errors, setError, setValue, control } = useForm({\n    validationSchema: editExpenseValidationSchema\n  });\n  const [submitting, setSubmitting] = useState(false);\n  const [currencyVisible, setCurrencyVisible] = useState(false);\n  const [expenseCategories, setExpenseCategories] = useState([]);\n\n  useEffect(() => {\n    requestExpenseCategory();\n    requestExpenseInfo();\n  }, []);\n\n  const requestExpenseCategory = async () => {\n    await axios.get(expenseApiEndpoints.expenseCategory, {})\n      .then(response => {\n        // console.log(response.data);\n        if (response.data.data.length > 0) {\n          setExpenseCategories(response.data.data);\n        }\n        else {\n\n        }\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  };\n\n  const requestExpenseInfo = async () => {\n    await axios.get(expenseApiEndpoints.expense + '/' + props.match.params.expense_id, {})\n      .then(response => {\n        // console.log('success', response.data);\n        setValue([\n          { id: response.data.id },\n          { expense_date: dayjs(response.data.transaction_date).toDate() },\n          { category: response.data.category },\n          { amount: response.data.amount },\n          { spent_on: response.data.spent_on },\n          { remarks: response.data.remarks },\n          { currency_id: response.data.currency_id },\n        ]);\n        setState(prev => ({ ...prev, currentCurrency: response.data.currency }));\n      })\n      .catch(error => {\n        console.log('error', error.response);\n\n        if (error.response.status === 401) {\n          messages.show({\n            severity: 'error',\n            detail: 'Something went wrong. Try again.',\n            sticky: true,\n            closable: true,\n            life: 5000\n          });\n        }\n\n      })\n  };\n\n  const submitUpdateExpense = (data) => {\n\n    data.expense_date = dayjs(data.expense_date).format('YYYY-MM-DD HH:mm:ss');\n    data.category_id = data.category.id;\n    data.currency_id = state.currentCurrency.id;\n\n    axios.put(expenseApiEndpoints.expense + '/' + props.match.params.expense_id, JSON.stringify(data))\n      .then(response => {\n        // console.log('success', response.data.request);\n\n        if (response.status === 200) {\n          setSubmitting(false);\n\n          messages.show({\n            severity: 'success',\n            detail: 'Your expense info updated successfully.',\n            sticky: false,\n            closable: false,\n            life: 5000\n          });\n        }\n\n      })\n      .catch(error => {\n        console.log('error');\n        console.log(error.response);\n\n        setSubmitting(false);\n\n        messages.clear();\n\n        if (error.response.status === 422) {\n          let errors = Object.entries(error.response.data).map(([key, value]) => {\n            return { name: key, message: value[0] }\n          });\n          setError(errors);\n        }\n        else if (error.response.status === 401) {\n          messages.show({\n            severity: 'error',\n            detail: 'Something went wrong. Try again.',\n            sticky: true,\n            closable: true,\n            life: 5000\n          });\n        }\n\n      })\n  };\n\n  return (\n    <div>\n      <Helmet title=\"Edit Expense\" />\n\n      <CurrencySidebar visible={currencyVisible} onHide={(e) => setCurrencyVisible(false)} />\n\n      <div className=\"p-grid p-nogutter\">\n        <div className=\"p-col-12\">\n          <div className=\"p-fluid\">\n            <Messages ref={(el) => messages = el} />\n          </div>\n        </div>\n      </div>\n\n      <div className=\"p-grid\">\n\n        <div className=\"p-col-12\">\n          <Card className=\"rounded-border\">\n            <div>\n              <div className=\"p-card-title p-grid p-nogutter p-justify-between\">Edit Expense</div>\n              <div className=\"p-card-subtitle\">Edit selected expense information below.</div>\n            </div>\n            <br />\n            <form onSubmit={handleSubmit(submitUpdateExpense)}>\n              <div className=\"p-fluid\">\n                <label>Expense Date</label>\n                <Controller\n                  name=\"expense_date\"\n                  onChange={([e]) => {\n                    return e.value;\n                  }}\n                  control={control}\n                  as={\n                    <Calendar\n                      dateFormat=\"yy-mm-dd\"\n                      showTime={true}\n                      hourFormat=\"12\"\n                      showButtonBar={true}\n                      touchUI={window.innerWidth < 768}\n                    />\n                  }\n                />\n                <p className=\"text-error\">{errors.expense_date?.message}</p>\n              </div>\n              <div className=\"p-fluid\">\n                <label>Expense Category</label>\n                <Controller\n                  name=\"category\"\n                  onChange={([e]) => {\n                    return e.value;\n                  }}\n                  control={control}\n                  as={\n                    <Dropdown\n                      filter={true}\n                      filterPlaceholder=\"Search here\"\n                      showClear={true}\n                      filterInputAutoFocus={false}\n                      options={expenseCategories}\n                      style={{ width: '100%' }}\n                      placeholder=\"Expense Category\"\n                      optionLabel=\"category_name\"\n                    />\n                  }\n                />\n                <p className=\"text-error\">{errors.category?.message}</p>\n              </div>\n              <div className=\"p-fluid\">\n                <label>Amount</label>\n                <div className=\"p-inputgroup\">\n                  <input type=\"text\" ref={register} placeholder=\"Amount\" name=\"amount\" className=\"p-inputtext p-component p-filled\" />\n                  <Button\n                    label={`${state.currencies.length === 0 ? 'loading' : state.currentCurrency.currency_code}`}\n                    type=\"button\"\n                    onClick={(e) => setCurrencyVisible(true)} />\n                </div>\n                <p className=\"text-error\">{errors.amount?.message}</p>\n              </div>\n              <div className=\"p-fluid\">\n                <label>Spent On</label>\n                <input type=\"text\" ref={register} name=\"spent_on\" className=\"p-inputtext p-component p-filled\" />\n                <p className=\"text-error\">{errors.spent_on?.message}</p>\n              </div>\n              <div className=\"p-fluid\">\n                <label>Remarks</label>\n                <textarea ref={register} rows={5} placeholder=\"\" name=\"remarks\" className=\"p-inputtext p-inputtextarea p-component p-inputtextarea-resizable\" />\n                <p className=\"text-error\">{errors.remarks?.message}</p>\n              </div>\n              <div className=\"p-fluid\">\n                <Button disabled={submitting} type=\"submit\" label=\"Save Changes\" icon=\"pi pi-save\"\n                  className=\"p-button-raised\" />\n              </div>\n            </form>\n          </Card>\n        </div>\n\n      </div>\n    </div>\n\n  )\n}\n\nexport default React.memo(EditExpense);\n","/home/tcg/my-workspace/Team-Serengetti/expense-tracker-app/client/src/app/expense/EditExpenseCategory.jsx",["204"],"import React, { useState, useEffect } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { useForm } from 'react-hook-form';\nimport * as yup from 'yup';\n\nimport { Messages } from 'primereact/messages';\nimport { Card } from 'primereact/card';\nimport { Button } from 'primereact/button';\n\nimport { expenseApiEndpoints } from './../../API';\nimport axios from './../../Axios';\n\nlet messages;\n\nconst expenseCategoryValidationSchema = yup.object().shape({\n  category_name: yup.string().required('Category name field is required').max(100, 'Category name must be at most 100 characters')\n});\n\nconst EditExpenseCategory = (props) => {\n\n  useEffect(() => {\n    requestExpenseCategory();\n  }, []);\n\n  const { register, handleSubmit, errors, setError, setValue } = useForm({\n    validationSchema: expenseCategoryValidationSchema\n  });\n  const [submitting, setSubmitting] = useState(false);\n\n  const requestExpenseCategory = async () => {\n    await axios.get(expenseApiEndpoints.expenseCategory + '/' + props.match.params.category_id, {})\n      .then(response => {\n        // console.log('success', response.data);\n        setValue('category_name', response.data.category_name);\n      })\n      .catch(error => {\n        console.log('error', error.response);\n\n        if (error.response.status === 401) {\n          messages.show({\n            severity: 'error',\n            detail: 'Something went wrong. Try again.',\n            sticky: true,\n            closable: true,\n            life: 5000\n          });\n        }\n\n      })\n  };\n\n  const submitUpdateExpenseCategory = async (data) => {\n    await axios.put(expenseApiEndpoints.expenseCategory + '/' + props.match.params.category_id, JSON.stringify(data))\n      .then(response => {\n        console.log('success', response.data.request);\n\n        if (response.status === 200) {\n          setSubmitting(false);\n\n          messages.show({\n            severity: 'success',\n            detail: 'Your expense category info updated successfully.',\n            sticky: false,\n            closable: false,\n            life: 5000\n          });\n        }\n\n      })\n      .catch(error => {\n        console.log('error', error);\n\n        setSubmitting(false);\n\n        messages.clear();\n\n        if (error.response.status === 422) {\n          let errors = Object.entries(error.response.data).map(([key, value]) => {\n            return { name: key, message: value[0] }\n          });\n          setError(errors);\n        }\n        else if (error.response.status === 401) {\n          messages.show({\n            severity: 'error',\n            detail: 'Something went wrong. Try again.',\n            sticky: true,\n            closable: true,\n            life: 5000\n          });\n        }\n\n      })\n  };\n\n  return (\n    <div>\n      <Helmet title=\"Edit Expense\" />\n\n      <div className=\"p-grid p-nogutter\">\n        <div className=\"p-col-12\">\n          <div className=\"p-fluid\">\n            <Messages ref={(el) => messages = el} />\n          </div>\n        </div>\n      </div>\n\n      <div className=\"p-grid\">\n\n        <div className=\"p-col-12\">\n          <Card className=\"rounded-border\">\n            <div>\n              <div className=\"p-card-title p-grid p-nogutter p-justify-between\">Edit Expense Category</div>\n              <div className=\"p-card-subtitle\">Edit selected expense category information below.</div>\n            </div>\n            <br />\n            <form onSubmit={handleSubmit(submitUpdateExpenseCategory)}>\n              <div className=\"p-fluid\">\n                <label>Category Name</label>\n                <div className=\"p-fluid\">\n                  <input type=\"text\" ref={register} placeholder=\"Category name\" name=\"category_name\" className=\"p-inputtext p-component p-filled\" />\n                  <p className=\"text-error\">{errors.category_name?.message}</p>\n                </div>\n              </div>\n              <div className=\"p-fluid\">\n                <Button disabled={submitting} type=\"submit\" label=\"Save Changes\" icon=\"pi pi-save\" className=\"p-button-raised\" />\n              </div>\n            </form>\n          </Card>\n        </div>\n\n      </div>\n    </div>\n\n  )\n}\n\nexport default React.memo(EditExpenseCategory);\n","/home/tcg/my-workspace/Team-Serengetti/expense-tracker-app/client/src/app/income/IncomeCategory.jsx",["205"],"import React, { useState, useEffect } from 'react';\nimport { Helmet } from 'react-helmet';\nimport * as yup from 'yup';\nimport { Link } from \"react-router-dom\";\nimport { useForm } from 'react-hook-form';\nimport Swal from 'sweetalert2';\n\nimport { Messages } from 'primereact/messages';\nimport { Card } from 'primereact/card';\nimport { Button } from 'primereact/button';\nimport { DataTable } from 'primereact/datatable';\nimport { ProgressSpinner } from 'primereact/progressspinner';\nimport { Column } from 'primereact/column';\n\nimport { incomeApiEndpoints } from './../../API';\nimport axios from './../../Axios';\n\nconst StyledSwal = Swal.mixin({\n  customClass: {\n    container: 'container-class',\n    popup: 'popup-class',\n    header: 'header-class',\n    title: 'p-card-title',\n    content: 'content-class',\n    closeButton: 'close-button-class',\n    image: 'image-class',\n    input: 'input-class',\n    actions: 'actions-class',\n    confirmButton: 'p-button p-button-raised p-button-danger p-button-text-icon-left',\n    cancelButton: 'p-button p-button-raised p-button-info p-button-text-icon-left',\n    footer: 'footer-class'\n  },\n  buttonsStyling: false\n});\n\nlet messages;\n\nconst incomeCategoryValidationSchema = yup.object().shape({\n  category_name: yup.string().required('Category name field is required').max(100, 'Category name must be at most 100 characters'),\n});\n\nconst IncomeCategory = (props) => {\n\n  const { register, handleSubmit, reset, errors, setError } = useForm({\n    validationSchema: incomeCategoryValidationSchema\n  });\n  const [datatable, setDatatable] = useState({\n    sortField: 'id',\n    sortOrder: -1,\n    rowsPerPage: 5,\n    currentPage: 1\n  });\n  const [incomeCategories, setIncomeCategories] = useState({\n    categories: {},\n    fetching: true\n  });\n  const [submitting, setSubmitting] = useState(false);\n\n  useEffect(() => {\n    requestIncomeCategories();\n  }, [datatable]);\n\n  const requestIncomeCategories = async () => {\n    setIncomeCategories({...incomeCategories, fetching: true});\n    await axios.get(incomeApiEndpoints.incomeCategory + '?page=' + datatable.currentPage + '&per_page=' + datatable.rowsPerPage + '&sort_col=' + datatable.sortField + '&sort_order=' + (datatable.sortOrder > 0 ? 'asc' : 'desc'), {})\n      .then(response => {\n        // console.log(response.data);\n        if (response.data.data) {\n          setIncomeCategories({\n            ...incomeCategories,\n            categories: response.data,\n            fetching: false\n          });\n        }\n        else {\n\n        }\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  };\n\n  const deleteIncomeCategory = (data) => {\n    // console.log(data);\n    StyledSwal.fire({\n      title: 'Are you sure?',\n      text: `Confirm to delete income category ${data.category_name}.`,\n      icon: 'warning',\n      showCancelButton: true,\n      confirmButtonText: '<span class=\"pi pi-trash p-button-icon-left\"></span><span class=\"p-button-text\">Delete</span>',\n      cancelButtonText: '<span class=\"pi pi-ban p-button-icon-left\"></span><span class=\"p-button-text\">No</span>',\n      // confirmButtonColor: '#f76452',\n      // cancelButtonColor: '#3085d6',\n      focusConfirm: false,\n      focusCancel: true\n    }).then((result) => {\n      if (result.value) {\n        axios.delete(incomeApiEndpoints.incomeCategory + '/' + data.id, {})\n          .then(response => {\n            // console.log(response.data);\n            if (response.status === 200) {\n\n              requestIncomeCategories();\n\n              messages.show({\n                severity: 'success',\n                detail: 'Your income category ' + data.category_name + ' deleted successfully.',\n                sticky: false,\n                closable: false,\n                life: 5000\n              });\n            }\n\n          })\n          .catch(error => {\n            // console.log('error', error.response);\n            if (error.response.status === 404) {\n              messages.clear();\n              messages.show({\n                severity: 'error',\n                detail: 'Income category ' + data.category_name + ' in use.',\n                sticky: true,\n                closable: true,\n                life: 5000\n              });\n            }\n\n            if (error.response.status === 401) {\n              messages.clear();\n              messages.show({\n                severity: 'error',\n                detail: 'Something went wrong. Try again.',\n                sticky: true,\n                closable: true,\n                life: 5000\n              });\n            }\n\n          });\n      }\n    })\n  };\n\n  const submitIncomeCategory = (data) => {\n    axios.post(incomeApiEndpoints.incomeCategory, JSON.stringify(data))\n      .then(response => {\n        // console.log('success', response.data);\n\n        if (response.status === 201) {\n\n          reset();\n          setSubmitting(false);\n          requestIncomeCategories();\n\n          messages.show({\n            severity: 'success',\n            detail: 'New income category ' + response.data.request.category_name + ' added.',\n            sticky: false,\n            closable: false,\n            life: 5000\n          });\n        }\n\n      })\n      .catch(error => {\n        console.log('error');\n        console.log(error.response);\n\n        if (error.response.status === 401) {\n          messages.clear();\n          messages.show({\n            severity: 'error',\n            detail: 'Something went wrong. Try again.',\n            sticky: true,\n            closable: true,\n            life: 5000\n          });\n        }\n\n        if (error.response.status === 422) {\n          let errors = Object.entries(error.response.data).map(([key, value]) => {\n            return { name: key, message: value[0] }\n          });\n          setError(errors);\n        }\n\n        setSubmitting(false)\n      })\n  };\n\n  return (\n    <div>\n      <Helmet title=\"Income Category\" />\n\n      <div className=\"p-grid p-nogutter\">\n        <div className=\"p-col-12\">\n          <div className=\"p-fluid\">\n            <Messages ref={(el) => messages = el} />\n          </div>\n        </div>\n      </div>\n\n      <div className=\"p-grid\">\n\n        <div className=\"p-col-12 p-md-6\">\n          <Card className=\"rounded-border\">\n            <div>\n              <div className=\"p-card-title p-grid p-nogutter p-justify-between\">Add Income Category</div>\n              <div className=\"p-card-subtitle\">Enter income category name below.</div>\n            </div>\n            <br />\n            <form onSubmit={handleSubmit(submitIncomeCategory)}>\n              <div className=\"p-fluid\">\n                <input type=\"text\" ref={register} placeholder=\"Category name\" name=\"category_name\" className=\"p-inputtext p-component p-filled\" />\n                <p className=\"text-error\">{errors.category_name?.message}</p>\n              </div>\n              <div className=\"p-fluid\">\n                <Button disabled={submitting} type=\"submit\" label=\"Add Category\" icon=\"pi pi-plus\"\n                  className=\"p-button-raised\" />\n              </div>\n            </form>\n          </Card>\n        </div>\n\n        <div className=\"p-col-12 p-md-6\">\n          <Card className=\"rounded-border\">\n            <div className='p-grid'>\n              <div className='p-col-6'>\n                <div className=\"p-card-title p-grid p-nogutter p-justify-between\">View Incomes Categories</div>\n                <div className=\"p-card-subtitle\">Here are list of income categories.</div>\n              </div>\n              <div className=\"p-col-6\" align=\"right\">\n                {incomeCategories.fetching ? <ProgressSpinner style={{ height: '25px', width: '25px' }} strokeWidth={'4'} /> : ''}\n              </div>\n            </div>\n            <br />\n            <DataTable\n              value={incomeCategories.categories.data}\n              sortField={datatable.sortField}\n              sortOrder={datatable.sortOrder}\n              responsive={true}\n              paginator={true}\n              rows={datatable.rowsPerPage}\n              rowsPerPageOptions={[5, 10, 20]}\n              totalRecords={incomeCategories.categories.total}\n              lazy={true}\n              first={incomeCategories.categories.from - 1}\n              onPage={(e) => {\n                // console.log(e);\n                setDatatable({\n                  ...datatable,\n                  currentPage: (e.page + 1),\n                  rowsPerPage: e.rows,\n                })\n              }}\n              onSort={e => {\n                // console.log(e);\n                setDatatable({\n                  ...datatable,\n                  sortField: e.sortField,\n                  sortOrder: e.sortOrder,\n                })\n              }}\n              className=\"text-center\"\n            >\n              <Column field=\"id\" header=\"Serial\" sortable={true} />\n              <Column field=\"category_name\" header=\"Category Name\" sortable={true} />\n              <Column\n                body={(rowData, column) => {\n                  // console.log(rowData);\n                  return (\n                    <div>\n                      <Link to={`/income/category/${rowData.id}/edit`}><Button label=\"Edit\"\n                        value={rowData.id}\n                        icon=\"pi pi-pencil\"\n                        className=\"p-button-raised p-button-rounded p-button-info\" /></Link>\n                      <Button label=\"Delete\"\n                        onClick={() => deleteIncomeCategory(rowData)}\n                        icon=\"pi pi-trash\"\n                        className=\"p-button-raised p-button-rounded p-button-danger\" />\n                    </div>\n                  )\n                }}\n                header=\"Action\"\n                style={{ textAlign: 'center', width: '8em' }}\n              />\n            </DataTable>\n          </Card>\n        </div>\n\n      </div>\n    </div>\n\n  )\n}\n\nexport default React.memo(IncomeCategory);\n","/home/tcg/my-workspace/Team-Serengetti/expense-tracker-app/client/src/app/income/Income.jsx",["206"],"import React, { useState, useEffect } from 'react';\nimport { Helmet } from 'react-helmet';\nimport * as yup from 'yup';\nimport * as dayjs from 'dayjs';\nimport Swal from 'sweetalert2';\nimport { Link } from 'react-router-dom';\nimport { useForm, Controller } from 'react-hook-form';\n\nimport { Messages } from 'primereact/messages';\nimport { Card } from 'primereact/card';\nimport { Button } from 'primereact/button';\nimport { DataTable } from 'primereact/datatable';\nimport { Column } from 'primereact/column';\nimport { ProgressSpinner } from 'primereact/progressspinner';\nimport { Dropdown } from 'primereact/dropdown';\nimport { Calendar } from 'primereact/calendar';\n\nimport CurrencySidebar from './../common/CurrencySidebar';\n\nimport axios from './../../Axios';\nimport { incomeApiEndpoints } from './../../API';\nimport { useTracked } from './../../Store';\n\nconst StyledSwal = Swal.mixin({\n  customClass: {\n    container: 'container-class',\n    popup: 'popup-class',\n    header: 'header-class',\n    title: 'p-card-title',\n    content: 'content-class',\n    closeButton: 'close-button-class',\n    image: 'image-class',\n    input: 'input-class',\n    actions: 'actions-class',\n    confirmButton: 'p-button p-button-raised p-button-danger p-button-text-icon-left',\n    cancelButton: 'p-button p-button-raised p-button-info p-button-text-icon-left',\n    footer: 'footer-class'\n  },\n  buttonsStyling: false\n});\n\nlet messages;\n\nconst addIncomeValidationSchema = yup.object().shape({\n  source: yup.string().required('Income source field is required').max(100, 'Income source must be at most 100 characters'),\n  category: yup.object().required('Income category field is required'),\n  notes: yup.string().max(200, 'Income notes must be at most 200 characters'),\n  amount: yup.string().required('Income amount field is required'),\n});\n\nconst Income = (props) => {\n\n  const [state] = useTracked();\n  const { register, handleSubmit, setValue, errors, setError, reset, control } = useForm({\n    validationSchema: addIncomeValidationSchema\n  });\n  const [datatable, setDatatable] = useState({\n    sortField: 'id',\n    sortOrder: -1,\n    rowsPerPage: 5,\n    currentPage: 1\n  });\n  const [currencyVisible, setCurrencyVisible] = useState(false);\n  const [incomeSummary, setIncomeSummary] = useState({});\n  const [submitting, setSubmitting] = useState(false);\n  const [incomeCategories, setIncomeCategories] = useState([]);\n  const [income, setIncome] = useState({ incomes: {}, fetching: true });\n\n  useEffect(() => {\n    requestIncomeSummary();\n    requestIncomeCategory();\n  }, []);\n\n  useEffect(() => {\n    requestIncome();\n  }, [datatable]);\n\n  const requestIncomeCategory = async () => {\n    await axios.get(incomeApiEndpoints.incomeCategory + '?sort_col=category_name&sort_order=asc', {})\n      .then(response => {\n        // console.log(response.data);\n        if (response.data.data.length > 0) {\n          setIncomeCategories(response.data.data);\n        }\n        else {\n\n        }\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  };\n\n  const requestIncome = async () => {\n    setIncome({ ...income, fetching: true });\n    await axios.get(incomeApiEndpoints.income + '?page=' + datatable.currentPage + '&sort_col=' + datatable.sortField + '&per_page=' + datatable.rowsPerPage + '&sort_order=' + (datatable.sortOrder > 0 ? 'asc' : 'desc'), {})\n      .then(response => {\n        // console.log('success', response.data);\n        if (response.data.data) {\n          setIncome({\n            ...income,\n            incomes: response.data,\n            fetching: false\n          });\n        }\n        else {\n          setIncome({\n            ...income,\n            fetching: false\n          });\n        }\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  };\n\n  const requestIncomeSummary = async () => {\n    await axios.get(incomeApiEndpoints.summary, {})\n      .then(response => {\n        // console.log(response.data);\n        setIncomeSummary(response.data.data);\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  };\n\n  const deleteIncome = (data) => {\n    // console.log(data);\n    StyledSwal.fire({\n      title: 'Are you sure?',\n      text: `Confirm to delete income on ${data.spent_on}.`,\n      icon: 'warning',\n      showCancelButton: true,\n      confirmButtonText: '<span class=\"pi pi-trash p-button-icon-left\"></span><span class=\"p-button-text\">Delete</span>',\n      cancelButtonText: '<span class=\"pi pi-ban p-button-icon-left\"></span><span class=\"p-button-text\">No</span>',\n      // confirmButtonColor: '#f76452',\n      // cancelButtonColor: '#3085d6',\n      focusConfirm: false,\n      focusCancel: true\n    })\n      .then((result) => {\n        if (result.value) {\n          axios.delete(incomeApiEndpoints.income + '/' + data.id, {})\n            .then(response => {\n              // console.log(response.data);\n              if (response.status === 200) {\n\n                requestIncome();\n                requestIncomeSummary();\n\n                messages.show({\n                  severity: 'success',\n                  detail: 'Your income on ' + data.spent_on + ' deleted successfully.',\n                  sticky: false,\n                  closable: false,\n                  life: 5000\n                });\n              }\n\n            })\n            .catch(error => {\n              console.log('error', error.response);\n\n              if (error.response.status === 401) {\n                messages.clear();\n                messages.show({\n                  severity: 'error',\n                  detail: 'Something went wrong. Try again.',\n                  sticky: true,\n                  closable: true,\n                  life: 5000\n                });\n              }\n\n            });\n        }\n      });\n  };\n\n  const submitIncome = (data) => {\n\n    data.category_id = data.category.id;\n    data.currency_id = state.currentCurrency.id;\n    data.income_date = dayjs(data.income_date).format('YYYY-MM-DD HH:mm:ss');\n\n    axios.post(incomeApiEndpoints.income, JSON.stringify(data))\n      .then(response => {\n        // console.log('success');\n        if (response.status === 201) {\n          reset();\n          setSubmitting(false);\n          setValue('income_date', dayjs(response.data.request.income_date).toDate());\n          requestIncome();\n          requestIncomeSummary();\n\n          messages.show({\n            severity: 'success',\n            detail: 'Your income on ' + response.data.request.spent_on + ' added.',\n            sticky: false,\n            closable: false,\n            life: 5000\n          });\n        }\n      })\n      .catch(error => {\n        console.log('error', error.response);\n\n        if (error.response.status === 401) {\n          messages.clear();\n          messages.show({\n            severity: 'error',\n            detail: 'Something went wrong. Try again.',\n            sticky: true,\n            closable: true,\n            life: 5000\n          });\n        }\n        else if (error.response.status === 422) {\n          let errors = Object.entries(error.response.data).map(([key, value]) => {\n            return { name: key, message: value[0] }\n          });\n          setError(errors);\n        }\n\n        setSubmitting(false)\n      })\n  };\n\n  const renderIncomeSummary = (data) => {\n    if (data && data.length > 0) {\n      return data.map((item, index) => {\n        return <div key={index}>\n          <div className=\"color-link text-center\">{item.total.toLocaleString()} <span className=\"color-title\">{item.currency_code + '.'}</span></div>\n          <hr />\n        </div>\n      })\n    }\n    else {\n      return <div>\n        <div className=\"text-center\">No income data found.</div>\n        <hr />\n      </div>\n    }\n  };\n\n  return (\n    <div>\n      <Helmet title=\"Income\" />\n\n      <CurrencySidebar visible={currencyVisible} onHide={(e) => setCurrencyVisible(false)} />\n\n      <div className=\"p-grid p-nogutter\">\n        <div className=\"p-col-12\">\n          <div className=\"p-fluid\">\n            <Messages ref={(el) => messages = el} />\n          </div>\n        </div>\n      </div>\n\n      <div className=\"p-grid p-nogutter\">\n        <div className=\"p-col-12\">\n          <div className=\"p-fluid\">\n\n            <div className=\"p-grid\">\n              <div className=\"p-col-6\">\n                <div className=\"p-panel p-component\">\n                  <div className=\"p-panel-titlebar\"><span className=\"color-title text-bold\">Income This Month</span>\n                  </div>\n                  <div className=\"p-panel-content-wrapper p-panel-content-wrapper-expanded\" id=\"pr_id_1_content\"\n                    aria-labelledby=\"pr_id_1_label\" aria-hidden=\"false\">\n                    <div className=\"p-panel-content\">\n                      {renderIncomeSummary(incomeSummary.income_month)}\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"p-col-6\">\n                <div className=\"p-panel p-component\">\n                  <div className=\"p-panel-titlebar\"><span className=\"color-title text-bold\">Income Today</span></div>\n                  <div className=\"p-panel-content-wrapper p-panel-content-wrapper-expanded\" id=\"pr_id_1_content\"\n                    aria-labelledby=\"pr_id_1_label\" aria-hidden=\"false\">\n                    <div className=\"p-panel-content\">\n                      {renderIncomeSummary(incomeSummary.income_today)}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n          </div>\n        </div>\n      </div>\n\n      <div className=\"p-grid\">\n\n        <div className=\"p-col-12 p-md-6\">\n          <Card className=\"rounded-border\">\n            <div>\n              <div className=\"p-card-title p-grid p-nogutter p-justify-between\">Add Income</div>\n              <div className=\"p-card-subtitle\">Add your income information below.</div>\n            </div>\n            <br />\n            <form onSubmit={handleSubmit(submitIncome)}>\n              <div className=\"p-fluid\">\n                <Controller\n                  name=\"income_date\"\n                  defaultValue={new Date()}\n                  onChange={([e]) => {\n                    // console.log(e);\n                    return e.value;\n                  }}\n                  control={control}\n                  as={\n                    <Calendar\n                      dateFormat=\"yy-mm-dd\"\n                      showTime={true}\n                      hourFormat=\"12\"\n                      showButtonBar={true}\n                      maxDate={new Date()}\n                      touchUI={window.innerWidth < 768}\n                    />\n                  }\n                />\n                <p className=\"text-error\">{errors.income_date?.message}</p>\n              </div>\n              <div className=\"p-fluid\">\n                <Controller\n                  name=\"category\"\n                  onChange={([e]) => {\n                    return e.value\n                  }}\n                  control={control}\n                  as={\n                    <Dropdown\n                      filter={true}\n                      filterPlaceholder=\"Search here\"\n                      showClear={true}\n                      filterInputAutoFocus={false}\n                      options={incomeCategories}\n                      style={{ width: '100%' }}\n                      placeholder=\"Income Category\"\n                      optionLabel=\"category_name\"\n                    />\n                  }\n                />\n                <p className=\"text-error\">{errors.category?.message}</p>\n              </div>\n              <div className=\"p-fluid\">\n                <input type=\"text\" ref={register} placeholder=\"Income Source\" name=\"source\" className=\"p-inputtext p-component p-filled\" />\n                <p className=\"text-error\">{errors.source?.message}</p>\n              </div>\n              <div className=\"p-fluid\">\n                <div className=\"p-inputgroup\">\n                  <input type=\"number\" step=\"0.00\" ref={register} keyfilter=\"money\" placeholder=\"Amount\" name=\"amount\" className=\"p-inputtext p-component p-filled\" />\n                  <Button\n                    label={`${state.currencies.length === 0 ? 'loading' : state.currentCurrency.currency_code}`}\n                    type=\"button\"\n                    onClick={(e) => setCurrencyVisible(true)} />\n                </div>\n                <p className=\"text-error\">{errors.amount?.message}</p>\n              </div>\n              <div className=\"p-fluid\">\n                <textarea ref={register} rows={5} placeholder=\"Income Notes\" name=\"notes\" className=\"p-inputtext p-inputtextarea p-component p-inputtextarea-resizable\" />\n                <p className=\"text-error\">{errors.notes?.message}</p>\n              </div>\n              <div className=\"p-fluid\">\n                <Button disabled={submitting} type=\"submit\" label=\"Add Income\" icon=\"pi pi-plus\"\n                  className=\"p-button-raised\" />\n              </div>\n            </form>\n          </Card>\n        </div>\n\n        <div className=\"p-col-12 p-md-6\">\n          <Card className=\"rounded-border\">\n            <div className='p-grid'>\n              <div className='p-col-6'>\n                <div className=\"p-card-title p-grid p-nogutter p-justify-between\">View Incomes</div>\n                <div className=\"p-card-subtitle\">Here are few incomes you've added.</div>\n              </div>\n              <div className=\"p-col-6\" align=\"right\">\n                {income.fetching ? <ProgressSpinner style={{ height: '25px', width: '25px' }} strokeWidth={'4'} /> : ''}\n              </div>\n            </div>\n            <br />\n            <DataTable\n              value={income.incomes.data}\n              sortField={datatable.sortField}\n              sortOrder={datatable.sortOrder}\n              responsive={true}\n              paginator={true}\n              rows={datatable.rowsPerPage}\n              rowsPerPageOptions={[5, 10, 20]}\n              totalRecords={income.incomes.total}\n              lazy={true}\n              first={income.incomes.from - 1}\n              onPage={(e) => {\n                // console.log(e);\n                setDatatable({\n                  ...datatable,\n                  currentPage: (e.page + 1),\n                  rowsPerPage: e.rows,\n                });\n              }}\n              onSort={e => {\n                // console.log(e);\n                setDatatable({\n                  ...datatable,\n                  sortField: e.sortField,\n                  sortOrder: e.sortOrder,\n                });\n              }}\n              className=\"text-center\"\n            >\n              <Column field=\"id\" header=\"Serial\" sortable={true} />\n              <Column field=\"source\" header=\"Source\" sortable={true} />\n              <Column field=\"amount\" header=\"Amount\" sortable={true}\n                body={(rowData, column) => {\n                  return rowData.amount.toLocaleString() + ' ' + rowData.currency_name\n                }}\n              />\n              <Column field=\"income_date\" header=\"Date\" sortable={true}\n                body={(rowData, column) => {\n                  return dayjs(rowData.income_date).format('YYYY-MM-DD hh:mm a')\n                }}\n              />\n              <Column\n                body={(rowData, column) => {\n                  // console.log(rowData);\n                  return (\n                    <div>\n                      <Link to={`/income/${rowData.id}/edit`}>\n                        <Button label=\"Edit\" value={rowData.id}\n                          icon=\"pi pi-pencil\"\n                          className=\"p-button-raised p-button-rounded p-button-info\" />\n                      </Link>\n                      <Button label=\"Delete\"\n                        onClick={() => deleteIncome(rowData)}\n                        icon=\"pi pi-trash\"\n                        className=\"p-button-raised p-button-rounded p-button-danger\" />\n                    </div>\n                  )\n                }}\n                header=\"Action\"\n                style={{ textAlign: 'center', width: '8em' }}\n              />\n            </DataTable>\n          </Card>\n        </div>\n\n      </div>\n    </div>\n\n  )\n}\n\nexport default React.memo(Income);\n","/home/tcg/my-workspace/Team-Serengetti/expense-tracker-app/client/src/app/income/EditIncome.jsx",["207"],"import React, { useEffect, useState } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { useForm, Controller } from 'react-hook-form';\nimport * as dayjs from 'dayjs';\nimport * as yup from 'yup';\n\nimport { Messages } from 'primereact/messages';\nimport { Card } from 'primereact/card';\nimport { Button } from 'primereact/button';\nimport { Calendar } from 'primereact/calendar';\nimport { Dropdown } from 'primereact/dropdown';\n\nimport CurrencySidebar from './../common/CurrencySidebar';\n\nimport { incomeApiEndpoints } from './../../API';\nimport axios from './../../Axios';\nimport { useTracked } from './../../Store';\n\nlet messages;\n\nconst editIncomeValidationSchema = yup.object().shape({\n  income_date: yup.string().required('Income date field is required'),\n  category: yup.object().required('Income category field is required'),\n  source: yup.string().required('Spent on field is required').max(100, 'Spent on must be at most 100 characters'),\n  amount: yup.number().required('Income amount field is required'),\n  notes: yup.string().max(200, 'Remarks must be at most 200 characters'),\n});\n\nconst EditIncome = (props) => {\n\n  const [state, setState] = useTracked();\n  const { register, handleSubmit, errors, setError, setValue, control } = useForm({\n    validationSchema: editIncomeValidationSchema\n  });\n  const [submitting, setSubmitting] = useState(false);\n  const [currencyVisible, setCurrencyVisible] = useState(false);\n  const [incomeCategories, setIncomeCategories] = useState([]);\n\n  useEffect(() => {\n    requestIncomeCategory();\n    requestIncomeInfo();\n  }, []);\n\n  const requestIncomeCategory = async () => {\n    await axios.get(incomeApiEndpoints.incomeCategory, {})\n      .then(response => {\n        // console.log(response.data);\n        if (response.data.data.length > 0) {\n          setIncomeCategories(response.data.data);\n        }\n        else {\n\n        }\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  };\n\n  const requestIncomeInfo = async () => {\n    await axios.get(incomeApiEndpoints.income + '/' + props.match.params.income_id, {})\n      .then(response => {\n        console.log('success', response.data.category);\n        setValue([\n          { id: response.data.id },\n          { income_date: dayjs(response.data.transaction_date).toDate() },\n          { category: response.data.category },\n          { source: response.data.source },\n          { amount: response.data.amount },\n          { notes: response.data.remarks },\n          { currency_id: response.data.currency_id },\n        ]);\n        setState(prev => ({ ...prev, currentCurrency: response.data.currency }));\n      })\n      .catch(error => {\n        console.log('error', error.response);\n\n        if (error.response.status === 401) {\n          messages.show({\n            severity: 'error',\n            detail: 'Something went wrong. Try again.',\n            sticky: true,\n            closable: true,\n            life: 5000\n          });\n        }\n\n      })\n  };\n\n  const submitUpdateIncome = (data) => {\n\n    data.income_date = dayjs(data.income_date).format('YYYY-MM-DD HH:mm:ss');\n    data.category_id = data.category.id;\n    data.currency_id = state.currentCurrency.id;\n\n    console.log(data);\n\n    axios.put(incomeApiEndpoints.income + '/' + props.match.params.income_id, JSON.stringify(data))\n      .then(response => {\n        console.log('success', response.data.request);\n\n        if (response.status === 200) {\n          setSubmitting(false);\n\n          messages.show({\n            severity: 'success',\n            detail: 'Your income info updated successfully.',\n            sticky: false,\n            closable: false,\n            life: 5000\n          });\n        }\n\n      })\n      .catch(error => {\n        console.log('error', error.response);\n\n        setSubmitting(false);\n\n        messages.clear();\n\n        if (error.response.status === 422) {\n          let errors = Object.entries(error.response.data).map(([key, value]) => {\n            return { name: key, message: value[0] }\n          });\n          setError(errors);\n        }\n        else if (error.response.status === 401) {\n          messages.show({\n            severity: 'error',\n            detail: 'Something went wrong. Try again.',\n            sticky: true,\n            closable: true,\n            life: 5000\n          });\n        }\n\n      })\n  };\n\n  return (\n    <div>\n      <Helmet title=\"Edit Income\" />\n\n      <CurrencySidebar visible={currencyVisible} onHide={(e) => setCurrencyVisible(false)} />\n\n      <div className=\"p-grid p-nogutter\">\n        <div className=\"p-col-12\">\n          <div className=\"p-fluid\">\n            <Messages ref={(el) => messages = el} />\n          </div>\n        </div>\n      </div>\n\n      <div className=\"p-grid\">\n\n        <div className=\"p-col-12\">\n          <Card className=\"rounded-border\">\n            <div>\n              <div className=\"p-card-title p-grid p-nogutter p-justify-between\">Edit Income</div>\n              <div className=\"p-card-subtitle\">Edit selected income information below.</div>\n            </div>\n            <br />\n            <form onSubmit={handleSubmit(submitUpdateIncome)}>\n              <div className=\"p-fluid\">\n                <label>Income Date</label>\n                <Controller\n                  name=\"income_date\"\n                  onChange={([e]) => {\n                    return e.value;\n                  }}\n                  control={control}\n                  as={\n                    <Calendar\n                      dateFormat=\"yy-mm-dd\"\n                      showTime={true}\n                      hourFormat=\"12\"\n                      showButtonBar={true}\n                      touchUI={window.innerWidth < 768}\n                    />\n                  }\n                />\n                <p className=\"text-error\">{errors.income_date?.message}</p>\n              </div>\n              <div className=\"p-fluid\">\n                <label>Income Category</label>\n                <Controller\n                  name=\"category\"\n                  onChange={([e]) => {\n                    return e.value\n                  }}\n                  control={control}\n                  as={\n                    <Dropdown\n                      filter={true}\n                      filterPlaceholder=\"Search here\"\n                      showClear={true}\n                      filterInputAutoFocus={false}\n                      options={incomeCategories}\n                      style={{ width: '100%' }}\n                      placeholder=\"Income Category\"\n                      optionLabel=\"category_name\"\n                    />\n                  }\n                />\n                <p className=\"text-error\">{errors.category?.message}</p>\n              </div>\n              <div className=\"p-fluid\">\n                <label>Income Source</label>\n                <input type=\"text\" ref={register} name=\"source\" className=\"p-inputtext p-component p-filled\" />\n                <p className=\"text-error\">{errors.source?.message}</p>\n              </div>\n              <div className=\"p-fluid\">\n                <label>Amount</label>\n                <div className=\"p-inputgroup\">\n                  <input type=\"text\" ref={register} placeholder=\"Amount\" name=\"amount\" className=\"p-inputtext p-component p-filled\" />\n                  <Button\n                    label={`${state.currencies.length === 0 ? 'loading' : state.currentCurrency.currency_code}`}\n                    type=\"button\"\n                    onClick={(e) => setCurrencyVisible(true)} />\n                </div>\n                <p className=\"text-error\">{errors.amount?.message}</p>\n              </div>\n              <div className=\"p-fluid\">\n                <label>Income Notes</label>\n                <textarea ref={register} rows={5} placeholder=\"\" name=\"notes\" className=\"p-inputtext p-inputtextarea p-component p-inputtextarea-resizable\" />\n                <p className=\"text-error\">{errors.notes?.message}</p>\n              </div>\n              <div className=\"p-fluid\">\n                <Button disabled={submitting} type=\"submit\" label=\"Save Changes\" icon=\"pi pi-save\"\n                  className=\"p-button-raised\" />\n              </div>\n            </form>\n          </Card>\n        </div>\n\n      </div>\n    </div>\n\n  )\n}\n\nexport default React.memo(EditIncome);\n","/home/tcg/my-workspace/Team-Serengetti/expense-tracker-app/client/src/app/income/EditIncomeCategory.jsx",["208"],"import React, { useState, useEffect } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { useForm } from 'react-hook-form';\nimport * as yup from 'yup';\n\nimport { Messages } from 'primereact/messages';\nimport { Card } from 'primereact/card';\nimport { Button } from 'primereact/button';\n\nimport { incomeApiEndpoints } from './../../API';\nimport axios from './../../Axios';\n\nlet messages;\n\nconst incomeCategoryValidationSchema = yup.object().shape({\n  category_name: yup.string().required('Category name field is required').max(100, 'Category name must be at most 100 characters')\n});\n\nconst EditIncomeCategory = (props) => {\n\n  useEffect(() => {\n    requestIncomeCategory();\n  }, []);\n\n  const { register, handleSubmit, errors, setError, setValue } = useForm({\n    validationSchema: incomeCategoryValidationSchema\n  });\n  const [submitting, setSubmitting] = useState(false);\n\n  const requestIncomeCategory = async () => {\n    await axios.get(incomeApiEndpoints.incomeCategory + '/' + props.match.params.category_id, {})\n      .then(response => {\n        // console.log('success', response.data);\n        setValue('category_name', response.data.category_name);\n      })\n      .catch(error => {\n        console.log('error', error.response);\n\n        if (error.response.status === 401) {\n          messages.show({\n            severity: 'error',\n            detail: 'Something went wrong. Try again.',\n            sticky: true,\n            closable: true,\n            life: 5000\n          });\n        }\n\n      })\n  };\n\n  const submitUpdateIncomeCategory = async (data) => {\n    await axios.put(incomeApiEndpoints.incomeCategory + '/' + props.match.params.category_id, JSON.stringify(data))\n      .then(response => {\n        console.log('success', response.data.request);\n\n        if (response.status === 200) {\n          setSubmitting(false);\n\n          messages.show({\n            severity: 'success',\n            detail: 'Your income category info updated successfully.',\n            sticky: false,\n            closable: false,\n            life: 5000\n          });\n        }\n\n      })\n      .catch(error => {\n        console.log('error', error);\n\n        setSubmitting(false);\n\n        messages.clear();\n\n        if (error.response.status === 422) {\n          let errors = Object.entries(error.response.data).map(([key, value]) => {\n            return { name: key, message: value[0] }\n          });\n          setError(errors);\n        }\n        else if (error.response.status === 401) {\n          messages.show({\n            severity: 'error',\n            detail: 'Something went wrong. Try again.',\n            sticky: true,\n            closable: true,\n            life: 5000\n          });\n        }\n\n      })\n  };\n\n  return (\n    <div>\n      <Helmet title=\"Edit Income\" />\n\n      <div className=\"p-grid p-nogutter\">\n        <div className=\"p-col-12\">\n          <div className=\"p-fluid\">\n            <Messages ref={(el) => messages = el} />\n          </div>\n        </div>\n      </div>\n\n      <div className=\"p-grid\">\n\n        <div className=\"p-col-12\">\n          <Card className=\"rounded-border\">\n            <div>\n              <div className=\"p-card-title p-grid p-nogutter p-justify-between\">Edit Income Category</div>\n              <div className=\"p-card-subtitle\">Edit selected income category information below.</div>\n            </div>\n            <br />\n            <form onSubmit={handleSubmit(submitUpdateIncomeCategory)}>\n              <div className=\"p-fluid\">\n                <label>Category Name</label>\n                <div className=\"p-fluid\">\n                  <input type=\"text\" ref={register} placeholder=\"Category name\" name=\"category_name\" className=\"p-inputtext p-component p-filled\" />\n                  <p className=\"text-error\">{errors.category_name?.message}</p>\n                </div>\n              </div>\n              <div className=\"p-fluid\">\n                <Button disabled={submitting} type=\"submit\" label=\"Save Changes\" icon=\"pi pi-save\" className=\"p-button-raised\" />\n              </div>\n            </form>\n          </Card>\n        </div>\n\n      </div>\n    </div>\n\n  )\n}\n\nexport default React.memo(EditIncomeCategory);\n","/home/tcg/my-workspace/Team-Serengetti/expense-tracker-app/client/src/app/profile/Profile.jsx",[],"/home/tcg/my-workspace/Team-Serengetti/expense-tracker-app/client/src/app/profile/EditProfile.jsx",["209","210"],"import React, { useEffect, useState, useCallback } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { useForm, Controller } from 'react-hook-form';\nimport * as yup from 'yup';\n\nimport { Messages } from 'primereact/messages';\nimport { Card } from 'primereact/card';\nimport { Button } from 'primereact/button';\nimport { Dropdown } from 'primereact/dropdown';\n\nimport { userApiEndpoints, currencyApiEndpoints } from './../../API';\nimport axios from './../../Axios';\nimport { useTracked } from './../../Store';\n\nconst updateProfileValidationSchema = yup.object().shape({\n  name: yup.string().required('Name field is required').min(4, 'Name must be at most 4 character'),\n  email: yup.string().required('Email field is required').min(6, 'Email must be at most 6 character'),\n  currency: yup.object().required('Currency field is required'),\n});\n\nlet messages; // For alert message\n\nconst EditProfile = (props) => {\n\n  const [state, setState] = useTracked();\n  const { register, handleSubmit, errors, setValue, setError, control } = useForm({\n    validationSchema: updateProfileValidationSchema\n  });\n  const [submitting, setSubmitting] = useState(false);\n\n  useEffect(() => {\n    requestCurrencies();\n    requestProfileInfo();\n  }, []);\n\n  const requestCurrencies = useCallback(async () => {\n    if (state.currencies.length === 0) {\n      await axios.get(currencyApiEndpoints.currency, {})\n        .then(response => {\n          // console.log(response.data);\n          if (response.data.data.length > 0) {\n            setState(prev => ({ ...prev, currencies: response.data.data }))\n          }\n        })\n        .catch(error => {\n          console.log(error);\n        });\n    }\n  }, [state.currencies.length]);\n\n  const currencyTemplate = (option) => {\n    return (<span><span className=\"color-highlight text-bold\">{option.currency_code}</span> - {option.currency_name}</span>);\n  };\n\n  const requestProfileInfo = async () => {\n    await axios.get(userApiEndpoints.self, {})\n      .then(response => {\n        // console.log('success', response.data);\n        setValue([\n          { name: response.data.name },\n          { email: response.data.email },\n          { currency: response.data.currency },\n        ]);\n        let { currency, ...rest } = response.data;\n        setState(prev => ({ ...prev, user: rest }));\n      })\n      .catch(error => {\n        console.log('error', error.response);\n\n        if (error.response.status === 401) {\n          messages.show({\n            severity: 'error',\n            detail: 'Something went wrong. Try again.',\n            sticky: true,\n            closable: true,\n            life: 5000\n          });\n        }\n\n      })\n  };\n\n  const submitUpdateProfile = (data) => {\n\n    data.currency_id = data.currency.id;\n\n    axios.put(userApiEndpoints.profile, JSON.stringify(data))\n      .then(response => {\n        // console.log('success', response.data.request);\n        if (response.status === 200) {\n          setSubmitting(false);\n          setValue([\n            { name: response.data.request.name },\n            { email: response.data.request.email },\n            { currency: state.currencies.find(el => el.id === response.data.request.currency_id ? el : null) },\n          ]);\n\n          let { currency, ...rest } = response.data.request;\n          setState(prev => ({ ...prev, user: rest }));\n\n          messages.show({\n            severity: 'success',\n            detail: 'Your profile info updated successfully.',\n            sticky: false,\n            closable: false,\n            life: 5000\n          });\n        }\n\n      })\n      .catch(error => {\n        console.log('error', error.response);\n\n        setSubmitting(false);\n\n        messages.clear();\n\n        if (error.response.status === 422) {\n          let errors = Object.entries(error.response.data).map(([key, value]) => {\n            return { name: key, message: value[0] }\n          });\n          setError(errors);\n        }\n        else if (error.response.status === 401) {\n          messages.show({\n            severity: 'error',\n            detail: 'Something went wrong. Try again.',\n            sticky: true,\n            closable: true,\n            life: 5000\n          });\n        }\n\n      })\n  };\n\n  return (\n    <div>\n      <Helmet title=\"Edit Profile\" />\n\n      <div className=\"p-grid p-nogutter\">\n        <div className=\"p-col-12\">\n          <div className=\"p-fluid\">\n            <Messages ref={(el) => messages = el} />\n          </div>\n        </div>\n      </div>\n\n      <div className=\"p-grid\">\n\n        <div className=\"p-col-12\">\n          <Card className=\"rounded-border\">\n            <div>\n              <div className=\"p-card-title p-grid p-nogutter p-justify-between\">Edit Profile</div>\n              <div className=\"p-card-subtitle\">Edit current profile information below.</div>\n            </div>\n            <br />\n            <form onSubmit={handleSubmit(submitUpdateProfile)}>\n              <div className=\"p-fluid\">\n                <label htmlFor=\"name\">Name</label>\n                <input type=\"text\" name=\"name\" ref={register} className=\"p-inputtext p-component p-filled\" />\n                <p className=\"text-error\">{errors.name?.message}</p>\n              </div>\n              <div className=\"p-fluid\">\n                <label htmlFor=\"email\">Email</label>\n                <input type=\"text\" name=\"email\" ref={register} className=\"p-inputtext p-component p-filled\" />\n                <p className=\"text-error\">{errors.email?.message}</p>\n              </div>\n              <div className=\"p-fluid\">\n                <label>Currency</label>\n                <Controller\n                  name=\"currency\"\n                  onChange={([e]) => {\n                    setState(prev => ({ ...prev, currentCurrency: e.value }));\n                    return e.value;\n                  }}\n                  defaultValue={state.currency}\n                  control={control}\n                  as={\n                    <Dropdown\n                      filter={true}\n                      filterBy=\"currency_code,currency_name\"\n                      filterPlaceholder=\"Search here\"\n                      showClear={true}\n                      filterInputAutoFocus={false}\n                      options={state.currencies}\n                      style={{ width: '100%' }}\n                      itemTemplate={currencyTemplate}\n                      placeholder=\"Select a currency\"\n                      optionLabel=\"currency_code\"\n                    />\n                  }\n                />\n                <p className=\"text-error\">{errors.currency?.message}</p>\n              </div>\n              <div className=\"p-fluid\">\n                <Button disabled={submitting} type=\"submit\" label=\"Update Profile\" icon=\"pi pi-refresh\" className=\"p-button-raised\" />\n              </div>\n            </form>\n          </Card>\n        </div>\n\n      </div>\n    </div>\n\n  )\n}\n\nexport default React.memo(EditProfile);\n","/home/tcg/my-workspace/Team-Serengetti/expense-tracker-app/client/src/app/calendar/TransactionCalendar.jsx",["211","212"],"import React, { useState, useEffect, useRef } from 'react';\nimport { Helmet } from 'react-helmet';\n\nimport { Messages } from 'primereact/messages';\nimport { Card } from 'primereact/card';\nimport { FullCalendar } from 'primereact/fullcalendar';\nimport { ProgressSpinner } from 'primereact/progressspinner';\nimport { Dialog } from 'primereact/dialog';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport listPlugin from '@fullcalendar/list';\nimport interactionPlugin from '@fullcalendar/interaction';\n\nimport ExpenseListItem from './../expense/ExpenseListItem';\n\nimport { expenseApiEndpoints, reportApiEndpoints, incomeApiEndpoints } from './../../API';\nimport axios from './../../Axios';\n\nlet messages;\n\nconst TransactionCalendar = (props) => {\n\n  const [events, setEvents] = useState({ events: [], eventsLoading: true });\n  const [transactionsByDate, setTransactionByDate] = useState({ transactions: [], transactionsLoading: true });\n  const [modalVisible, setModalVisible] = useState(false);\n  const eventInfo = useRef({ id: null, type: null });\n\n  useEffect(() => {\n    requestTransaction();\n  }, []);\n\n  const options = {\n    plugins: [dayGridPlugin, timeGridPlugin, interactionPlugin, listPlugin],\n    defaultView: 'dayGridMonth',\n    themeSystem: 'standard',\n    height: 'auto',\n    titleFormat: { year: 'numeric', month: 'long' },\n    buttonText: {\n      today: 'Today',\n      month: 'Month',\n      week: 'Week',\n      day: 'Day',\n      list: 'List'\n    },\n    header: {\n      left: 'dayGridMonth,listWeek', // timeGridWeek,timeGridDay\n      center: 'title',\n      right: 'today,prev,next' // prevYear,nextYear\n    },\n    editable: false,\n    dateClick: (info) => {\n      // console.log(info);\n      // info.dayEl.style.backgroundColor = '#fcf8e3';\n      // console.log('Clicked on: ' + info.dateStr);\n      // console.log('Coordinates: ' + info.jsEvent.pageX + ',' + info.jsEvent.pageY);\n      // console.log('Current view: ' + info.view.type);\n    },\n    eventClick: (info) => {\n      eventInfo.current = { id: `${info.event.id}%`, type: info.event.extendedProps.type };\n      setModalVisible(true);\n    },\n  };\n\n  const renderTransactionDetails = () => {\n    if (transactionsByDate.transactionsLoading) {\n      return (\n        <div className=\"p-grid p-nogutter p-justify-center\">\n          <ProgressSpinner style={{ height: '25px' }} strokeWidth={'4'} />\n        </div>\n      );\n    }\n    else {\n      if (transactionsByDate.transactions.length > 0) {\n        return transactionsByDate.transactions.map((item, index) => {\n          return <ExpenseListItem key={item.id} itemDetail={item} />;\n        })\n      }\n      else {\n        return (\n          <div className=\"p-grid p-nogutter p-justify-center\">\n            <h4 className=\"color-subtitle\">Failed to retrieve data.</h4>\n          </div>\n        );\n      }\n    }\n  };\n\n  const requestTransactionDetail = async (transaction_date, transaction_type) => {\n\n    let api_endpoint = '';\n\n    if (transaction_type === 'Income') {\n      api_endpoint = incomeApiEndpoints.income;\n    }\n    else {\n      api_endpoint = expenseApiEndpoints.expense;\n    }\n\n    await axios.get(api_endpoint + '?per_page=5&sort_order=desc&search_col=transaction_date&search_by=' + transaction_date, {})\n      .then(response => {\n        console.log(response.data);\n        setTransactionByDate({\n          ...transactionsByDate,\n          transactions: response.data.data,\n          transactionsLoading: false\n        });\n      })\n      .catch(error => {\n        console.log('error', error);\n        setTransactionByDate({\n          ...transactionsByDate,\n          transactionsLoading: false\n        });\n      });\n  };\n\n  const requestTransaction = () => {\n    axios.get(reportApiEndpoints.transaction, {})\n      .then(response => {\n        // console.log(response.data);\n        if (response.data.transactions.length > 0) {\n          setEvents({\n            ...events,\n            eventsLoading: false,\n            events: response.data.transactions.map(item => {\n              return item.transaction_type === 'Income' ?\n                {\n                  id: item.formatted_date,\n                  title: `(+) ${item.total} ${item.currency_name}`,\n                  date: item.formatted_date,\n                  type: item.transaction_type,\n                  backgroundColor: '#55dda9',\n                  borderColor: '#55dda9',\n                } : {\n                  id: item.formatted_date,\n                  title: `(-) ${item.total} ${item.currency_name}`,\n                  date: item.formatted_date,\n                  type: item.transaction_type,\n                  backgroundColor: '#ffb102',\n                  borderColor: '#ffb102'\n                }\n            })\n          });\n        } else {\n          setEvents({ ...events, eventsLoading: false });\n        }\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  };\n\n  return (\n    <div>\n      <Helmet title=\"Calendar\" />\n\n      <div className=\"p-grid p-nogutter\">\n        <div className=\"p-col-12\">\n          <div className=\"p-fluid\">\n            <Messages ref={(el) => messages = el} />\n          </div>\n        </div>\n      </div>\n\n      <Dialog\n        header=\"Transaction Detail\"\n        visible={modalVisible}\n        style={{ width: '80%' }}\n        modal={true}\n        onShow={() => {\n          requestTransactionDetail(eventInfo.current.id, eventInfo.current.type);\n        }}\n        onHide={() => {\n          setTransactionByDate({\n            ...transactionsByDate,\n            transactions: [],\n            transactionsLoading: true\n          });\n          setModalVisible(false);\n        }}\n        dismissableMask={true}\n      >\n        {renderTransactionDetails()}\n      </Dialog>\n\n      <div className=\"p-grid\">\n\n        <div className=\"p-col-12\">\n          <Card className=\"rounded-border\">\n            <div className='p-grid'>\n              <div className='p-col-6'>\n                <div className=\"p-card-title p-grid p-nogutter p-justify-between\">Transactions +/-</div>\n                <div className=\"p-card-subtitle\">Detail of your daily incomes and expenses.</div>\n              </div>\n              <div className=\"p-col-6\" align=\"right\">\n                {events.eventsLoading ? <ProgressSpinner style={{ height: '25px', width: '25px' }} strokeWidth={'4'} /> : ''}\n              </div>\n            </div>\n            <br />\n            <div>\n              <FullCalendar events={events.events} options={options} />\n            </div>\n          </Card>\n        </div>\n\n      </div>\n    </div>\n\n  )\n}\n\nexport default React.memo(TransactionCalendar);\n","/home/tcg/my-workspace/Team-Serengetti/expense-tracker-app/client/src/app/setting/Setting.jsx",["213"],"import React, { useState, useCallback } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { useTranslation } from 'react-i18next';\n\nimport { Messages } from 'primereact/messages';\nimport { Card } from 'primereact/card';\nimport { Button } from 'primereact/button';\n\nimport CurrencySidebar from './../common/CurrencySidebar';\n\nimport { currencyApiEndpoints } from './../../API';\nimport axios from './../../Axios';\nimport { setItem } from './../../Helpers';\nimport { useTracked } from './../../Store';\n\nlet messages; // For alert message\n\nconst Setting = (props) => {\n\n  const [state, setState] = useTracked();\n  const [visible, setVisible] = useState(false);\n  const [t, i18n] = useTranslation();\n\n  const toggleLanguage = useCallback(() => {\n    i18n.language === 'en' ? i18n.changeLanguage('bn') : i18n.changeLanguage('en');\n    setItem('language', i18n.language);\n  }, [i18n]);\n\n  const submitSetting = () => {\n    axios.put(currencyApiEndpoints.currency + '/' + state.user.id, JSON.stringify({ currency_id: state.currentCurrency.id }))\n      .then(response => {\n        console.log('success', response.data);\n\n        if (response.status === 200) {\n\n          setState(prev => ({ ...prev, currency_id: response.data.request.currency_id }));\n\n          messages.show({\n            severity: 'success',\n            detail: 'Current currency set to ' + state.currentCurrency.currency_code + ' (' + state.currentCurrency.currency_name + ').',\n            sticky: false,\n            closable: false,\n            life: 5000\n          });\n        }\n\n      })\n      .catch(error => {\n        console.log('error');\n        console.log(error.response);\n\n        if (error.response.status === 401) {\n          messages.clear();\n          messages.show({\n            severity: 'error',\n            detail: 'Something went wrong. Try again.',\n            sticky: true,\n            closable: true,\n            life: 5000\n          });\n        }\n\n        if (error.response.status === 422) {\n          messages.clear();\n          messages.show({\n            severity: 'error',\n            detail: 'Currency is same as selected. Nothing changed.',\n            sticky: true,\n            closable: true,\n            life: 5000\n          });\n        }\n\n      })\n  };\n\n  return (\n    <div>\n      <Helmet title=\"Settings\" />\n\n      <CurrencySidebar visible={visible} onHide={(e) => setVisible(false)} />\n\n      <div className=\"p-grid p-nogutter\">\n        <div className=\"p-col-12\">\n          <div className=\"p-fluid\">\n            <Messages ref={(el) => messages = el} />\n          </div>\n        </div>\n      </div>\n\n      <div className=\"p-grid\">\n\n        <div className=\"p-col-12 p-md-6\">\n          <Card className=\"rounded-border\">\n            <div>\n              <div className=\"p-card-title p-grid p-nogutter p-justify-between\">App Settings</div>\n              <div className=\"p-card-subtitle\">Below are the current setup for this app.</div>\n            </div>\n            <br />\n            <div className=\"p-grid p-nogutter p-justify-between\">\n              <h3 className=\"color-title p-col-4\">\n                Current Currency:\n                </h3>\n              <h3 className=\"color-highlight p-col-4\">\n                {state.currencies.length === 0 ? 'loading' : state.currentCurrency.currency_code + ' (' + state.currentCurrency.currency_name + ')'}\n              </h3>\n              <h3>\n                <Button label=\"Change\" icon=\"pi pi-refresh\"\n                  className=\"p-button-rounded p-button-raised p-button-secondary\" type=\"button\"\n                  onClick={(e) => setVisible(true)} />\n              </h3>\n            </div>\n\n            <div className=\"p-card-footer p-fluid\">\n              <Button label=\"Update\" className=\"\" icon=\"pi pi-save\" onClick={() => submitSetting()} />\n            </div>\n          </Card>\n        </div>\n\n        <div className=\"p-col-12 p-md-6\">\n          <Card className=\"rounded-border\">\n            <div>\n              <div className=\"p-card-title p-grid p-nogutter p-justify-between\">Interface Setting</div>\n              <div className=\"p-card-subtitle\">Below are the current setup for this UI.</div>\n            </div>\n            <br />\n            <div className=\"p-grid p-nogutter p-justify-between\">\n              <h3 className=\"color-title p-col-4\">\n                Menu Color:\n                </h3>\n              <h3 className=\"color-highlight p-col-4\">\n                {state.layoutColorMode === 'dark' ? 'Dark' : 'Light'}\n              </h3>\n              <h3>\n                <Button label=\"Toggle\" icon=\"pi pi-refresh\"\n                  className=\"p-button-rounded p-button-raised p-button-secondary\"\n                  type=\"button\"\n                  onClick={(e) => {\n                    state.layoutColorMode === 'dark' ? setState(prev => ({ ...prev, layoutColorMode: 'light' })) : setState(prev => ({ ...prev, layoutColorMode: 'dark' }))\n                  }} />\n              </h3>\n            </div>\n            <div className=\"p-grid p-nogutter p-justify-between\">\n              <h3 className=\"color-title p-col-4\">\n                Menu Mode:\n                </h3>\n              <h3 className=\"color-highlight p-col-4\">\n                {state.layoutMode === 'static' ? 'Static' : 'Overlay'}\n              </h3>\n              <h3>\n                <Button label=\"Toggle\" icon=\"pi pi-refresh\"\n                  className=\"p-button-rounded p-button-raised p-button-secondary\"\n                  type=\"button\"\n                  onClick={(e) => {\n                    state.layoutMode === 'static' ? setState(prev => ({ ...prev, layoutMode: 'overlay' })) : setState(prev => ({ ...prev, layoutMode: 'static' }))\n                  }} />\n              </h3>\n            </div>\n            <div className=\"p-grid p-nogutter p-justify-between\">\n              <h3 className=\"color-title p-col-4\">\n                Language:\n                </h3>\n              <h3 className=\"color-highlight p-col-4\">\n                {i18n.language === 'en' ? 'English' : 'বাংলা'}\n              </h3>\n              <h3>\n                <Button label=\"Toggle\" icon=\"pi pi-refresh\"\n                  className=\"p-button-rounded p-button-raised p-button-secondary\"\n                  type=\"button\"\n                  onClick={(e) => toggleLanguage()} />\n              </h3>\n            </div>\n          </Card>\n        </div>\n\n      </div>\n    </div>\n\n  )\n}\n\nexport default React.memo(Setting);\n","/home/tcg/my-workspace/Team-Serengetti/expense-tracker-app/client/src/app/errors/404.jsx",[],"/home/tcg/my-workspace/Team-Serengetti/expense-tracker-app/client/src/app/analytics/Analytics.jsx",["214","215","216","217"],"import React, { useState, useEffect, useRef } from 'react';\nimport { Helmet } from 'react-helmet';\n\nimport { Messages } from 'primereact/messages';\nimport { Card } from 'primereact/card';\nimport { Chart } from 'primereact/chart';\nimport { Dropdown } from 'primereact/dropdown';\nimport { ProgressSpinner } from 'primereact/progressspinner';\n\nimport { chartApiEndpoints } from './../../API';\nimport axios from './../../Axios';\n\nlet messages;\n\nconst Analytics = (props) => {\n\n  const [incomeExpenseCategoryId, setIncomeExpenseCategoryId] = useState(null)\n  const [incomeExpenseCategories, setIncomeExpenseCategories] = useState([])\n\n  const [monthWiseChartData, setMonthWiseChartData] = useState({\n    barChartData: {},\n    barChartDataOptions: {},\n    barChartDataLoading: true\n  });\n\n  const [categoryWiseChartData, setCategoryWiseChartData] = useState({\n    barChartData: {},\n    barChartDataOptions: {},\n    barChartDataLoading: false\n  });\n\n  useEffect(() => {\n    requestIncomeExpenseCategories();\n    requestMonthWiseChartData();\n  }, []);\n\n  useEffect(() => {\n    requestCategoryWiseChartData();\n  }, [incomeExpenseCategoryId])\n\n  const requestIncomeExpenseCategories = () => {\n    axios.get(chartApiEndpoints.incomeExpenseCategories, {})\n      .then(response => {\n        // console.log(response.data);\n        setIncomeExpenseCategories(response.data);\n      })\n      .catch(error => {\n        // console.log(error);\n        setIncomeExpenseCategories([]);\n      });\n  };\n\n  const requestMonthWiseChartData = () => {\n    axios.get(chartApiEndpoints.incomeExpenseMonthWise, {})\n      .then(response => {\n        // console.log(response.data);\n        setMonthWiseChartData({ ...monthWiseChartData, barChartData: response.data.data.barChartData, barChartDataOptions: response.data.data.options, barChartDataLoading: false });\n      })\n      .catch(error => {\n        // console.log(error);\n        setMonthWiseChartData({ ...monthWiseChartData, barChartDataLoading: false });\n      });\n  };\n\n  const requestCategoryWiseChartData = () => {\n    if (incomeExpenseCategoryId) {\n      setCategoryWiseChartData({ ...categoryWiseChartData, barChartDataLoading: true })\n      axios.get(chartApiEndpoints.incomeExpenseCategoryWise, {\n        params: { category_id: incomeExpenseCategoryId }\n      })\n        .then(response => {\n          // console.log(response.data);\n          setCategoryWiseChartData({ ...categoryWiseChartData, barChartData: response.data.data.barChartData, barChartDataOptions: response.data.data.options, barChartDataLoading: false });\n        })\n        .catch(error => {\n          // console.log(error);\n          setCategoryWiseChartData({ ...categoryWiseChartData, barChartDataLoading: false });\n        });\n    }\n  };\n\n  return (\n    <div>\n      <Helmet title=\"Analytics\" />\n\n      <div className=\"p-grid p-nogutter\">\n        <div className=\"p-col-12\">\n          <div className=\"p-fluid\">\n            <Messages ref={(el) => messages = el} />\n          </div>\n        </div>\n      </div>\n\n      <div className=\"p-grid\">\n\n        <div className=\"p-col-12\">\n          <Card className=\"rounded-border\">\n            <div className='p-grid'>\n              <div className='p-col-9'>\n                <div className=\"p-card-title p-grid p-nogutter p-justify-between\">Monthly Income & Expense Chart</div>\n                <div className=\"p-card-subtitle\">Glimpse of your incomes and expenses for a year.</div>\n              </div>\n              <div className=\"p-col-3\" align=\"right\">\n                {monthWiseChartData.barChartDataLoading ? <ProgressSpinner style={{ height: '25px', width: '25px' }} strokeWidth={'4'} /> : ''}\n              </div>\n            </div>\n            <br />\n            <div>\n              <Chart type=\"bar\" data={monthWiseChartData.barChartData} options={monthWiseChartData.barChartDataOptions} />\n            </div>\n          </Card>\n        </div>\n\n        <div className=\"p-col-12\">\n          <Card className=\"rounded-border\">\n            <div className='p-grid'>\n              <div className='p-col-9'>\n                <div className=\"p-card-title p-grid p-nogutter p-justify-between\">Category Wise Income & Expense Chart</div>\n                <div className=\"p-card-subtitle\">Glimpse of your incomes and expenses for a category.</div>\n              </div>\n              <div className=\"p-col-3\" align=\"right\">\n                {categoryWiseChartData.barChartDataLoading ? <ProgressSpinner style={{ height: '25px', width: '25px' }} strokeWidth={'4'} /> : ''}\n              </div>\n            </div>\n            <br />\n            <div>\n              <Dropdown\n                onChange={(e) => setIncomeExpenseCategoryId(e.value)}\n                value={incomeExpenseCategoryId}\n                itemTemplate={option => {\n                  return option.category_name + ' (' + option.category_type + ')';\n                }}\n                filter={true}\n                filterBy=\"category_name,category_type\"\n                filterPlaceholder=\"Search here\"\n                showClear={true}\n                filterInputAutoFocus={false}\n                options={incomeExpenseCategories}\n                style={{ width: '100%' }}\n                placeholder=\"Select an Income Expense Category\"\n                optionLabel=\"category_name\"\n                optionValue=\"id\"\n              />\n            </div>\n            <br />\n            <div>\n              <Chart type=\"bar\" data={categoryWiseChartData.barChartData} options={categoryWiseChartData.barChartDataOptions} />\n            </div>\n          </Card>\n        </div>\n\n      </div>\n    </div>\n\n  )\n}\n\nexport default React.memo(Analytics);\n","/home/tcg/my-workspace/Team-Serengetti/expense-tracker-app/client/src/app/expense/ExpenseListItem.jsx",[],"/home/tcg/my-workspace/Team-Serengetti/expense-tracker-app/client/src/app/dashboard/AppSubmenu.jsx",[],"/home/tcg/my-workspace/Team-Serengetti/expense-tracker-app/client/src/app/income/IncomeListItem.jsx",[],"/home/tcg/my-workspace/Team-Serengetti/expense-tracker-app/client/src/app/common/ToolsSidebar.jsx",[],"/home/tcg/my-workspace/Team-Serengetti/expense-tracker-app/client/src/app/common/CurrencySidebar.jsx",["218","219"],"import React, { useCallback, useEffect } from 'react';\n\nimport { Sidebar } from 'primereact/sidebar';\nimport { ListBox } from 'primereact/listbox';\nimport { ProgressSpinner } from 'primereact/progressspinner';\n\nimport { useTracked } from './../../Store';\nimport { currencyApiEndpoints } from './../../API';\nimport axios from './../../Axios';\n\nconst CurrencySidebar = (props) => {\n\n  const [state, setState] = useTracked();\n\n  useEffect(() => {\n    requestCurrencies();\n  }, [state.currencies.length]);\n\n  const requestCurrencies = useCallback(() => {\n    if (state.currencies.length === 0) {\n      axios.get(currencyApiEndpoints.currency, {})\n        .then(response => {\n          // console.log(response.data);\n          if (response.data.data.length > 0) {\n            let currency = response.data.data.find(el => el.id === state.user.currency_id ? el : null);\n\n            setState(prev => ({ ...prev, currencies: response.data.data, currentCurrency: currency }));\n          }\n        })\n        .catch(error => {\n          console.log(error);\n        });\n    }\n  }, [state.currencies.length]);\n\n  return (\n    <Sidebar visible={props.visible} position=\"right\" onHide={props.onHide} style={{ width: '345px' }}>\n      <h1 className=\"p-card-title\">Currencies</h1>\n      {\n        state.currencies.length === 0 ?\n          <div className=\"p-grid p-justify-center p-align-center\" style={{ height: '86vh' }}>\n            <ProgressSpinner style={{ height: '35px' }} strokeWidth={'4'} />\n          </div>\n          :\n          <ListBox\n            value={state.currentCurrency}\n            filter={true}\n            filterBy=\"currency_code,country\"\n            options={state.currencies}\n            dataKey=\"currency_code\"\n            optionLabel=\"currency_code\"\n            onChange={(e) => {\n              // console.log(e.value);\n              setState(prev => ({ ...prev, currentCurrency: e.value }));\n            }}\n            itemTemplate={(item) => {\n              return (\n                <div className=\"p-clearfix\">\n                  <span className=\"color-highlight text-bold\">{item.currency_code}</span> <span style={{ fontSize: '12px', fontWeight: 'bold' }}>{item.country}</span>\n                </div>\n              )\n            }}\n            listStyle={{ maxHeight: '86vh' }}\n            style={{ width: '100%' }}\n          />\n      }\n    </Sidebar>\n  );\n}\n\nexport default React.memo(CurrencySidebar);\n","/home/tcg/my-workspace/Team-Serengetti/expense-tracker-app/client/src/app/common/calculator/Calculator.js",[],{"ruleId":"220","severity":1,"message":"221","line":1,"column":1,"nodeType":"222","endLine":27,"endColumn":2},{"ruleId":"220","severity":1,"message":"221","line":1,"column":1,"nodeType":"222","endLine":28,"endColumn":2},{"ruleId":"223","severity":1,"message":"224","line":27,"column":10,"nodeType":"225","messageId":"226","endLine":27,"endColumn":15},{"ruleId":"223","severity":1,"message":"227","line":4,"column":10,"nodeType":"225","messageId":"226","endLine":4,"endColumn":14},{"ruleId":"228","severity":1,"message":"229","line":14,"column":9,"nodeType":"230","endLine":14,"endColumn":72},{"ruleId":"228","severity":1,"message":"229","line":18,"column":11,"nodeType":"230","endLine":18,"endColumn":54},{"ruleId":"228","severity":1,"message":"231","line":13,"column":7,"nodeType":"230","endLine":13,"endColumn":78},{"ruleId":"232","severity":1,"message":"233","line":52,"column":6,"nodeType":"234","endLine":52,"endColumn":8,"suggestions":"235"},{"ruleId":"232","severity":1,"message":"236","line":61,"column":6,"nodeType":"234","endLine":61,"endColumn":17,"suggestions":"237"},{"ruleId":"232","severity":1,"message":"238","line":78,"column":6,"nodeType":"234","endLine":78,"endColumn":17,"suggestions":"239"},{"ruleId":"232","severity":1,"message":"240","line":42,"column":6,"nodeType":"234","endLine":42,"endColumn":8,"suggestions":"241"},{"ruleId":"232","severity":1,"message":"242","line":23,"column":6,"nodeType":"234","endLine":23,"endColumn":8,"suggestions":"243"},{"ruleId":"232","severity":1,"message":"244","line":61,"column":6,"nodeType":"234","endLine":61,"endColumn":17,"suggestions":"245"},{"ruleId":"232","severity":1,"message":"246","line":76,"column":6,"nodeType":"234","endLine":76,"endColumn":17,"suggestions":"247"},{"ruleId":"232","severity":1,"message":"248","line":42,"column":6,"nodeType":"234","endLine":42,"endColumn":8,"suggestions":"249"},{"ruleId":"232","severity":1,"message":"250","line":23,"column":6,"nodeType":"234","endLine":23,"endColumn":8,"suggestions":"251"},{"ruleId":"232","severity":1,"message":"252","line":34,"column":6,"nodeType":"234","endLine":34,"endColumn":8,"suggestions":"253"},{"ruleId":"232","severity":1,"message":"254","line":49,"column":6,"nodeType":"234","endLine":49,"endColumn":31,"suggestions":"255"},{"ruleId":"223","severity":1,"message":"256","line":19,"column":5,"nodeType":"225","messageId":"226","endLine":19,"endColumn":13},{"ruleId":"232","severity":1,"message":"257","line":30,"column":6,"nodeType":"234","endLine":30,"endColumn":8,"suggestions":"258"},{"ruleId":"223","severity":1,"message":"259","line":22,"column":10,"nodeType":"225","messageId":"226","endLine":22,"endColumn":11},{"ruleId":"223","severity":1,"message":"260","line":1,"column":38,"nodeType":"225","messageId":"226","endLine":1,"endColumn":44},{"ruleId":"223","severity":1,"message":"256","line":13,"column":5,"nodeType":"225","messageId":"226","endLine":13,"endColumn":13},{"ruleId":"232","severity":1,"message":"261","line":35,"column":6,"nodeType":"234","endLine":35,"endColumn":8,"suggestions":"262"},{"ruleId":"232","severity":1,"message":"263","line":39,"column":6,"nodeType":"234","endLine":39,"endColumn":31,"suggestions":"264"},{"ruleId":"232","severity":1,"message":"265","line":17,"column":6,"nodeType":"234","endLine":17,"endColumn":31,"suggestions":"266"},{"ruleId":"232","severity":1,"message":"267","line":34,"column":6,"nodeType":"234","endLine":34,"endColumn":31,"suggestions":"268"},"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-unused-vars","'state' is assigned a value but never used.","Identifier","unusedVar","'Link' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'requestExpense' and 'requestIncome'. Either include them or remove the dependency array.","ArrayExpression",["269"],"React Hook useEffect has a missing dependency: 'requestExpenseCategories'. Either include it or remove the dependency array.",["270"],"React Hook useEffect has a missing dependency: 'requestExpense'. Either include it or remove the dependency array.",["271"],"React Hook useEffect has a missing dependency: 'requestExpenseInfo'. Either include it or remove the dependency array.",["272"],"React Hook useEffect has a missing dependency: 'requestExpenseCategory'. Either include it or remove the dependency array.",["273"],"React Hook useEffect has a missing dependency: 'requestIncomeCategories'. Either include it or remove the dependency array.",["274"],"React Hook useEffect has a missing dependency: 'requestIncome'. Either include it or remove the dependency array.",["275"],"React Hook useEffect has a missing dependency: 'requestIncomeInfo'. Either include it or remove the dependency array.",["276"],"React Hook useEffect has a missing dependency: 'requestIncomeCategory'. Either include it or remove the dependency array.",["277"],"React Hook useEffect has missing dependencies: 'requestCurrencies' and 'requestProfileInfo'. Either include them or remove the dependency array.",["278"],"React Hook useCallback has a missing dependency: 'setState'. Either include it or remove the dependency array.",["279"],"'messages' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'requestTransaction'. Either include it or remove the dependency array.",["280"],"'t' is assigned a value but never used.","'useRef' is defined but never used.","React Hook useEffect has a missing dependency: 'requestMonthWiseChartData'. Either include it or remove the dependency array.",["281"],"React Hook useEffect has a missing dependency: 'requestCategoryWiseChartData'. Either include it or remove the dependency array.",["282"],"React Hook useEffect has a missing dependency: 'requestCurrencies'. Either include it or remove the dependency array.",["283"],"React Hook useCallback has missing dependencies: 'setState' and 'state.user.currency_id'. Either include them or remove the dependency array.",["284"],{"desc":"285","fix":"286"},{"desc":"287","fix":"288"},{"desc":"289","fix":"290"},{"desc":"291","fix":"292"},{"desc":"293","fix":"294"},{"desc":"295","fix":"296"},{"desc":"297","fix":"298"},{"desc":"299","fix":"300"},{"desc":"301","fix":"302"},{"desc":"303","fix":"304"},{"desc":"305","fix":"306"},{"desc":"307","fix":"308"},{"desc":"309","fix":"310"},{"desc":"311","fix":"312"},{"desc":"313","fix":"314"},{"desc":"315","fix":"316"},"Update the dependencies array to be: [requestExpense, requestIncome]",{"range":"317","text":"318"},"Update the dependencies array to be: [datatable, requestExpenseCategories]",{"range":"319","text":"320"},"Update the dependencies array to be: [datatable, requestExpense]",{"range":"321","text":"322"},"Update the dependencies array to be: [requestExpenseInfo]",{"range":"323","text":"324"},"Update the dependencies array to be: [requestExpenseCategory]",{"range":"325","text":"326"},"Update the dependencies array to be: [datatable, requestIncomeCategories]",{"range":"327","text":"328"},"Update the dependencies array to be: [datatable, requestIncome]",{"range":"329","text":"330"},"Update the dependencies array to be: [requestIncomeInfo]",{"range":"331","text":"332"},"Update the dependencies array to be: [requestIncomeCategory]",{"range":"333","text":"334"},"Update the dependencies array to be: [requestCurrencies, requestProfileInfo]",{"range":"335","text":"336"},"Update the dependencies array to be: [setState, state.currencies.length]",{"range":"337","text":"338"},"Update the dependencies array to be: [requestTransaction]",{"range":"339","text":"340"},"Update the dependencies array to be: [requestMonthWiseChartData]",{"range":"341","text":"342"},"Update the dependencies array to be: [incomeExpenseCategoryId, requestCategoryWiseChartData]",{"range":"343","text":"344"},"Update the dependencies array to be: [requestCurrencies, state.currencies.length]",{"range":"345","text":"346"},"Update the dependencies array to be: [setState, state.currencies.length, state.user.currency_id]",{"range":"347","text":"348"},[2210,2212],"[requestExpense, requestIncome]",[1895,1906],"[datatable, requestExpenseCategories]",[2688,2699],"[datatable, requestExpense]",[1596,1598],"[requestExpenseInfo]",[692,694],"[requestExpenseCategory]",[1888,1899],"[datatable, requestIncomeCategories]",[2609,2620],"[datatable, requestIncome]",[1580,1582],"[requestIncomeInfo]",[688,690],"[requestIncomeCategory]",[1237,1239],"[requestCurrencies, requestProfileInfo]",[1689,1714],"[setState, state.currencies.length]",[1158,1160],"[requestTransaction]",[1039,1041],"[requestMonthWiseChartData]",[1106,1131],"[incomeExpenseCategoryId, requestCategoryWiseChartData]",[474,499],"[requestCurrencies, state.currencies.length]",[1070,1095],"[setState, state.currencies.length, state.user.currency_id]"]