{"ast":null,"code":"import axios from 'axios';\nimport { authApiEndpoints, host } from \"./API\";\nimport { getItem, setItem, removeItem } from \"./Helpers\";\naxios.defaults.baseURL = host;\naxios.defaults.headers['Content-Type'] = 'application/json';\naxios.interceptors.request.use(config => {\n  // console.log('request interceptor');\n  const url = config.url.split('/');\n\n  if (url[url.length - 1] === 'login' || url[url.length - 1] === 'register') {\n    delete config.headers.Authorization; // Do not send Authorization if from Login or Register\n  }\n\n  let access_token = getItem('access_token');\n\n  if (access_token) {\n    config.headers['Authorization'] = 'Bearer ' + access_token;\n  }\n\n  return config;\n}, error => Promise.reject(error));\nlet is_refreshing = false;\nlet subscribers = [];\naxios.interceptors.response.use(undefined, err => {\n  // console.log('response interceptor');\n  const {\n    config,\n    response: {\n      status\n    }\n  } = err;\n  const originalRequest = config;\n\n  if (status === 401) {\n    if (!is_refreshing) {\n      is_refreshing = true;\n      let instance = axios.create({\n        headers: {\n          'Authorization': 'Bearer ' + getItem('access_token')\n        }\n      });\n      instance.patch(host + authApiEndpoints.refresh).then(response => {\n        is_refreshing = false;\n        onRefreshed(response.data.access_token); // console.log('token refreshed');\n\n        setItem('expires_in', response.data.expires_in);\n        setItem('access_token', response.data.access_token);\n        setItem('token_created', response.data.token_created);\n        subscribers = [];\n      }).catch(error => {\n        console.log(error.response.status); // Returning false in my case\n        // return false\n\n        if (error.response.status === 401) {\n          logout();\n        }\n      });\n    }\n\n    const axiosSubscribers = new Promise(resolve => {\n      subscribeTokenRefresh(token => {\n        originalRequest.headers.Authorization = 'Bearer ' + token;\n        resolve(axios(originalRequest));\n      });\n    });\n    return axiosSubscribers;\n  }\n\n  return Promise.reject(err);\n});\n\nfunction subscribeTokenRefresh(cb) {\n  subscribers.push(cb);\n}\n\nfunction onRefreshed(token) {\n  subscribers.map(cb => cb(token));\n} // Logout a user\n\n\nexport const logout = () => {\n  axios.post(authApiEndpoints.logout).then(response => {\n    // Check if success\n    removeItem('user');\n    removeItem('token_created');\n    removeItem('access_token');\n    removeItem('expires_in');\n    window.location.reload();\n    return true;\n  }).catch(error => {\n    // Check if token expired\n    // Check any other error, like - invalid token\n    // Or forcefully logout the user\n    removeItem('user');\n    removeItem('token_created');\n    removeItem('access_token');\n    removeItem('expires_in');\n    window.location.reload();\n    return true; // Return false if you need\n  });\n};\nexport default axios;","map":{"version":3,"sources":["/home/tcg/my-workspace/Team-Serengetti/expense-tracker-app/client/src/Axios.js"],"names":["axios","authApiEndpoints","host","getItem","setItem","removeItem","defaults","baseURL","headers","interceptors","request","use","config","url","split","length","Authorization","access_token","error","Promise","reject","is_refreshing","subscribers","response","undefined","err","status","originalRequest","instance","create","patch","refresh","then","onRefreshed","data","expires_in","token_created","catch","console","log","logout","axiosSubscribers","resolve","subscribeTokenRefresh","token","cb","push","map","post","window","location","reload"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { authApiEndpoints, host } from \"./API\";\nimport { getItem, setItem, removeItem } from \"./Helpers\";\n\naxios.defaults.baseURL = host;\naxios.defaults.headers['Content-Type'] = 'application/json';\n\naxios.interceptors.request.use(\n  config => {\n    // console.log('request interceptor');\n    const url = config.url.split('/');\n\n    if (url[url.length - 1] === 'login' || url[url.length - 1] === 'register') {\n      delete config.headers.Authorization; // Do not send Authorization if from Login or Register\n    }\n\n    let access_token = getItem('access_token');\n    if (access_token) {\n      config.headers['Authorization'] = 'Bearer ' + access_token;\n    }\n\n    return config;\n  },\n  error => Promise.reject(error),\n);\n\nlet is_refreshing = false;\n\nlet subscribers = [];\n\naxios.interceptors.response.use(undefined, err => {\n  // console.log('response interceptor');\n  const { config, response: { status } } = err;\n  const originalRequest = config;\n\n  if (status === 401) {\n\n    if (!is_refreshing) {\n      is_refreshing = true;\n\n      let instance = axios.create({\n        headers: { 'Authorization': 'Bearer ' + getItem('access_token') }\n      });\n\n      instance.patch(host + authApiEndpoints.refresh)\n        .then(response => {\n          is_refreshing = false;\n          onRefreshed(response.data.access_token);\n\n          // console.log('token refreshed');\n          setItem('expires_in', response.data.expires_in);\n          setItem('access_token', response.data.access_token);\n          setItem('token_created', response.data.token_created);\n\n          subscribers = [];\n        })\n        .catch(error => {\n          console.log(error.response.status);\n          // Returning false in my case\n          // return false\n          if (error.response.status === 401) {\n            logout();\n          }\n        });\n    }\n\n    const axiosSubscribers = new Promise(resolve => {\n      subscribeTokenRefresh(token => {\n        originalRequest.headers.Authorization = 'Bearer ' + token;\n        resolve(axios(originalRequest));\n      });\n    });\n\n    return axiosSubscribers;\n  }\n  return Promise.reject(err);\n});\n\nfunction subscribeTokenRefresh(cb) {\n  subscribers.push(cb);\n}\n\nfunction onRefreshed(token) {\n  subscribers.map(cb => cb(token));\n}\n\n// Logout a user\nexport const logout = () => {\n  axios.post(authApiEndpoints.logout)\n    .then(response => {\n      // Check if success\n      removeItem('user');\n      removeItem('token_created');\n      removeItem('access_token');\n      removeItem('expires_in');\n      window.location.reload();\n\n      return true;\n    })\n    .catch(error => {\n      // Check if token expired\n      // Check any other error, like - invalid token\n      // Or forcefully logout the user\n      removeItem('user');\n      removeItem('token_created');\n      removeItem('access_token');\n      removeItem('expires_in');\n      window.location.reload();\n      return true; // Return false if you need\n    })\n};\n\nexport default axios;\n"]},"metadata":{},"sourceType":"module"}